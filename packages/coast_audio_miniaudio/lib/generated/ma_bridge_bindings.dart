// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class MaBridge {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  MaBridge(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  MaBridge.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> signal(
    int arg0,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> arg1,
  ) {
    return _signal(
      arg0,
      arg1,
    );
  }

  late final _signalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> Function(
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Void Function(ffi.Int)>>)>>('signal');
  late final _signal = _signalPtr.asFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> Function(
              int,
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>)>(
      isLeaf: true);

  ffi.Pointer<ffi.Void> alloca(
    int arg0,
  ) {
    return _alloca(
      arg0,
    );
  }

  late final _allocaPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'alloca');
  late final _alloca =
      _allocaPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>(isLeaf: true);

  late final ffi.Pointer<ffi.Int> ___mb_cur_max =
      _lookup<ffi.Int>('__mb_cur_max');

  int get __mb_cur_max => ___mb_cur_max.value;

  set __mb_cur_max(int value) => ___mb_cur_max.value = value;

  ffi.Pointer<ffi.Void> malloc_type_malloc(
    int size,
    int type_id,
  ) {
    return _malloc_type_malloc(
      size,
      type_id,
    );
  }

  late final _malloc_type_mallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Size, malloc_type_id_t)>>('malloc_type_malloc');
  late final _malloc_type_malloc = _malloc_type_mallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>(isLeaf: true);

  ffi.Pointer<ffi.Void> malloc_type_calloc(
    int count,
    int size,
    int type_id,
  ) {
    return _malloc_type_calloc(
      count,
      size,
      type_id,
    );
  }

  late final _malloc_type_callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Size, ffi.Size, malloc_type_id_t)>>('malloc_type_calloc');
  late final _malloc_type_calloc = _malloc_type_callocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int, int)>(isLeaf: true);

  void malloc_type_free(
    ffi.Pointer<ffi.Void> ptr,
    int type_id,
  ) {
    return _malloc_type_free(
      ptr,
      type_id,
    );
  }

  late final _malloc_type_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, malloc_type_id_t)>>('malloc_type_free');
  late final _malloc_type_free = _malloc_type_freePtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>(isLeaf: true);

  ffi.Pointer<ffi.Void> malloc_type_realloc(
    ffi.Pointer<ffi.Void> ptr,
    int size,
    int type_id,
  ) {
    return _malloc_type_realloc(
      ptr,
      size,
      type_id,
    );
  }

  late final _malloc_type_reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              malloc_type_id_t)>>('malloc_type_realloc');
  late final _malloc_type_realloc = _malloc_type_reallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, int, int)>(isLeaf: true);

  ffi.Pointer<ffi.Void> malloc_type_valloc(
    int size,
    int type_id,
  ) {
    return _malloc_type_valloc(
      size,
      type_id,
    );
  }

  late final _malloc_type_vallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Size, malloc_type_id_t)>>('malloc_type_valloc');
  late final _malloc_type_valloc = _malloc_type_vallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>(isLeaf: true);

  ffi.Pointer<ffi.Void> malloc_type_aligned_alloc(
    int alignment,
    int size,
    int type_id,
  ) {
    return _malloc_type_aligned_alloc(
      alignment,
      size,
      type_id,
    );
  }

  late final _malloc_type_aligned_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size,
              malloc_type_id_t)>>('malloc_type_aligned_alloc');
  late final _malloc_type_aligned_alloc = _malloc_type_aligned_allocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int, int)>(isLeaf: true);

  int malloc_type_posix_memalign(
    ffi.Pointer<ffi.Pointer<ffi.Void>> memptr,
    int alignment,
    int size,
    int type_id,
  ) {
    return _malloc_type_posix_memalign(
      memptr,
      alignment,
      size,
      type_id,
    );
  }

  late final _malloc_type_posix_memalignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Size,
              ffi.Size, malloc_type_id_t)>>('malloc_type_posix_memalign');
  late final _malloc_type_posix_memalign =
      _malloc_type_posix_memalignPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int, int)>(isLeaf: true);

  ffi.Pointer<ffi.Void> malloc_type_zone_malloc(
    ffi.Pointer<malloc_zone_t> zone,
    int size,
    int type_id,
  ) {
    return _malloc_type_zone_malloc(
      zone,
      size,
      type_id,
    );
  }

  late final _malloc_type_zone_mallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<malloc_zone_t>, ffi.Size,
              malloc_type_id_t)>>('malloc_type_zone_malloc');
  late final _malloc_type_zone_malloc = _malloc_type_zone_mallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<malloc_zone_t>, int, int)>(isLeaf: true);

  ffi.Pointer<ffi.Void> malloc_type_zone_calloc(
    ffi.Pointer<malloc_zone_t> zone,
    int count,
    int size,
    int type_id,
  ) {
    return _malloc_type_zone_calloc(
      zone,
      count,
      size,
      type_id,
    );
  }

  late final _malloc_type_zone_callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<malloc_zone_t>, ffi.Size,
              ffi.Size, malloc_type_id_t)>>('malloc_type_zone_calloc');
  late final _malloc_type_zone_calloc = _malloc_type_zone_callocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<malloc_zone_t>, int, int, int)>(isLeaf: true);

  void malloc_type_zone_free(
    ffi.Pointer<malloc_zone_t> zone,
    ffi.Pointer<ffi.Void> ptr,
    int type_id,
  ) {
    return _malloc_type_zone_free(
      zone,
      ptr,
      type_id,
    );
  }

  late final _malloc_type_zone_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<malloc_zone_t>, ffi.Pointer<ffi.Void>,
              malloc_type_id_t)>>('malloc_type_zone_free');
  late final _malloc_type_zone_free = _malloc_type_zone_freePtr.asFunction<
      void Function(ffi.Pointer<malloc_zone_t>, ffi.Pointer<ffi.Void>,
          int)>(isLeaf: true);

  ffi.Pointer<ffi.Void> malloc_type_zone_realloc(
    ffi.Pointer<malloc_zone_t> zone,
    ffi.Pointer<ffi.Void> ptr,
    int size,
    int type_id,
  ) {
    return _malloc_type_zone_realloc(
      zone,
      ptr,
      size,
      type_id,
    );
  }

  late final _malloc_type_zone_reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<malloc_zone_t>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              malloc_type_id_t)>>('malloc_type_zone_realloc');
  late final _malloc_type_zone_realloc =
      _malloc_type_zone_reallocPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<malloc_zone_t>,
              ffi.Pointer<ffi.Void>, int, int)>(isLeaf: true);

  ffi.Pointer<ffi.Void> malloc_type_zone_valloc(
    ffi.Pointer<malloc_zone_t> zone,
    int size,
    int type_id,
  ) {
    return _malloc_type_zone_valloc(
      zone,
      size,
      type_id,
    );
  }

  late final _malloc_type_zone_vallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<malloc_zone_t>, ffi.Size,
              malloc_type_id_t)>>('malloc_type_zone_valloc');
  late final _malloc_type_zone_valloc = _malloc_type_zone_vallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<malloc_zone_t>, int, int)>(isLeaf: true);

  ffi.Pointer<ffi.Void> malloc_type_zone_memalign(
    ffi.Pointer<malloc_zone_t> zone,
    int alignment,
    int size,
    int type_id,
  ) {
    return _malloc_type_zone_memalign(
      zone,
      alignment,
      size,
      type_id,
    );
  }

  late final _malloc_type_zone_memalignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<malloc_zone_t>, ffi.Size,
              ffi.Size, malloc_type_id_t)>>('malloc_type_zone_memalign');
  late final _malloc_type_zone_memalign =
      _malloc_type_zone_memalignPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<malloc_zone_t>, int, int, int)>(isLeaf: true);

  ffi.Pointer<ffi.Void> malloc(
    int __size,
  ) {
    return _malloc(
      __size,
    );
  }

  late final _mallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'malloc');
  late final _malloc =
      _mallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>(isLeaf: true);

  ffi.Pointer<ffi.Void> calloc(
    int __count,
    int __size,
  ) {
    return _calloc(
      __count,
      __size,
    );
  }

  late final _callocPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>(
      'calloc');
  late final _calloc = _callocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>(isLeaf: true);

  void free(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _free(
      arg0,
    );
  }

  late final _freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free =
      _freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>(isLeaf: true);

  ffi.Pointer<ffi.Void> realloc(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc(
      __ptr,
      __size,
    );
  }

  late final _reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('realloc');
  late final _realloc = _reallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>(
          isLeaf: true);

  ffi.Pointer<ffi.Void> valloc(
    int arg0,
  ) {
    return _valloc(
      arg0,
    );
  }

  late final _vallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'valloc');
  late final _valloc =
      _vallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>(isLeaf: true);

  ffi.Pointer<ffi.Void> aligned_alloc(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc(
      __alignment,
      __size,
    );
  }

  late final _aligned_allocPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>(
      'aligned_alloc');
  late final _aligned_alloc = _aligned_allocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>(isLeaf: true);

  int posix_memalign(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Size,
              ffi.Size)>>('posix_memalign');
  late final _posix_memalign = _posix_memalignPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>(
          isLeaf: true);

  void abort() {
    return _abort();
  }

  late final _abortPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort = _abortPtr.asFunction<void Function()>(isLeaf: true);

  int abs(
    int arg0,
  ) {
    return _abs(
      arg0,
    );
  }

  late final _absPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs = _absPtr.asFunction<int Function(int)>(isLeaf: true);

  int atexit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> arg0,
  ) {
    return _atexit(
      arg0,
    );
  }

  late final _atexitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit = _atexitPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>(isLeaf: true);

  double atof(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _atof(
      arg0,
    );
  }

  late final _atofPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof =
      _atofPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>(isLeaf: true);

  int atoi(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _atoi(
      arg0,
    );
  }

  late final _atoiPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi =
      _atoiPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>(isLeaf: true);

  int atol(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _atol(
      arg0,
    );
  }

  late final _atolPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol =
      _atolPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>(isLeaf: true);

  int atoll(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _atoll(
      arg0,
    );
  }

  late final _atollPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll =
      _atollPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>(isLeaf: true);

  ffi.Pointer<ffi.Void> bsearch(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _bsearch(
      __key,
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _bsearchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('bsearch');
  late final _bsearch = _bsearchPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>)>(isLeaf: true);

  div_t div(
    int arg0,
    int arg1,
  ) {
    return _div(
      arg0,
      arg1,
    );
  }

  late final _divPtr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div = _divPtr.asFunction<div_t Function(int, int)>(isLeaf: true);

  void exit(
    int arg0,
  ) {
    return _exit(
      arg0,
    );
  }

  late final _exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit = _exitPtr.asFunction<void Function(int)>(isLeaf: true);

  ffi.Pointer<ffi.Char> getenv(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _getenv(
      arg0,
    );
  }

  late final _getenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv = _getenvPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>(
          isLeaf: true);

  int labs(
    int arg0,
  ) {
    return _labs(
      arg0,
    );
  }

  late final _labsPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs = _labsPtr.asFunction<int Function(int)>(isLeaf: true);

  ldiv_t ldiv(
    int arg0,
    int arg1,
  ) {
    return _ldiv(
      arg0,
      arg1,
    );
  }

  late final _ldivPtr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Long, ffi.Long)>>('ldiv');
  late final _ldiv =
      _ldivPtr.asFunction<ldiv_t Function(int, int)>(isLeaf: true);

  int llabs(
    int arg0,
  ) {
    return _llabs(
      arg0,
    );
  }

  late final _llabsPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs = _llabsPtr.asFunction<int Function(int)>(isLeaf: true);

  lldiv_t lldiv(
    int arg0,
    int arg1,
  ) {
    return _lldiv(
      arg0,
      arg1,
    );
  }

  late final _lldivPtr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
          'lldiv');
  late final _lldiv =
      _lldivPtr.asFunction<lldiv_t Function(int, int)>(isLeaf: true);

  int mblen(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen(
      __s,
      __n,
    );
  }

  late final _mblenPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>(
      'mblen');
  late final _mblen = _mblenPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int)>(isLeaf: true);

  int mbstowcs(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _mbstowcs(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mbstowcsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbstowcs');
  late final _mbstowcs = _mbstowcsPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>(isLeaf: true);

  int mbtowc(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _mbtowc(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mbtowcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbtowc');
  late final _mbtowc = _mbtowcPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>(isLeaf: true);

  void qsort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _qsort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _qsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('qsort');
  late final _qsort = _qsortPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>)>(isLeaf: true);

  int rand() {
    return _rand();
  }

  late final _randPtr = _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand = _randPtr.asFunction<int Function()>(isLeaf: true);

  void srand(
    int arg0,
  ) {
    return _srand(
      arg0,
    );
  }

  late final _srandPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand = _srandPtr.asFunction<void Function(int)>(isLeaf: true);

  double strtod(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
  ) {
    return _strtod(
      arg0,
      arg1,
    );
  }

  late final _strtodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod = _strtodPtr.asFunction<
      double Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>(isLeaf: true);

  double strtof(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
  ) {
    return _strtof(
      arg0,
      arg1,
    );
  }

  late final _strtofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof = _strtofPtr.asFunction<
      double Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>(isLeaf: true);

  int strtol(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol = _strtolPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int)>(isLeaf: true);

  int strtoll(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtollPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll = _strtollPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int)>(isLeaf: true);

  int strtoul(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtoulPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul = _strtoulPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int)>(isLeaf: true);

  int strtoull(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtoullPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull = _strtoullPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int)>(isLeaf: true);

  int system(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _system(
      arg0,
    );
  }

  late final _systemPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system =
      _systemPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>(isLeaf: true);

  int wcstombs(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.WChar> arg1,
    int arg2,
  ) {
    return _wcstombs(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wcstombsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>,
              ffi.Size)>>('wcstombs');
  late final _wcstombs = _wcstombsPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>, int)>(isLeaf: true);

  int wctomb(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _wctomb(
      arg0,
      arg1,
    );
  }

  late final _wctombPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.WChar)>>(
      'wctomb');
  late final _wctomb = _wctombPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int)>(isLeaf: true);

  void _Exit(
    int arg0,
  ) {
    return __Exit(
      arg0,
    );
  }

  late final __ExitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit = __ExitPtr.asFunction<void Function(int)>(isLeaf: true);

  int a64l(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _a64l(
      arg0,
    );
  }

  late final _a64lPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l =
      _a64lPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>(isLeaf: true);

  double drand48() {
    return _drand48();
  }

  late final _drand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand48 = _drand48Ptr.asFunction<double Function()>(isLeaf: true);

  ffi.Pointer<ffi.Char> ecvt(
    double arg0,
    int arg1,
    ffi.Pointer<ffi.Int> arg2,
    ffi.Pointer<ffi.Int> arg3,
  ) {
    return _ecvt(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ecvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt = _ecvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>(isLeaf: true);

  double erand48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _erand48(
      arg0,
    );
  }

  late final _erand48Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>(
      'erand48');
  late final _erand48 =
      _erand48Ptr.asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>(
          isLeaf: true);

  ffi.Pointer<ffi.Char> fcvt(
    double arg0,
    int arg1,
    ffi.Pointer<ffi.Int> arg2,
    ffi.Pointer<ffi.Int> arg3,
  ) {
    return _fcvt(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _fcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt = _fcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>(isLeaf: true);

  ffi.Pointer<ffi.Char> gcvt(
    double arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _gcvt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _gcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt = _gcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Char>)>(isLeaf: true);

  int getsubopt(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
  ) {
    return _getsubopt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _getsuboptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt = _getsuboptPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>(isLeaf: true);

  int grantpt(
    int arg0,
  ) {
    return _grantpt(
      arg0,
    );
  }

  late final _grantptPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('grantpt');
  late final _grantpt = _grantptPtr.asFunction<int Function(int)>(isLeaf: true);

  ffi.Pointer<ffi.Char> initstate(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _initstate(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _initstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedLong, ffi.Pointer<ffi.Char>, ffi.Long)>>('initstate');
  late final _initstate = _initstatePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          int, ffi.Pointer<ffi.Char>, int)>(isLeaf: true);

  int jrand48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _jrand48(
      arg0,
    );
  }

  late final _jrand48Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>(
      'jrand48');
  late final _jrand48 = _jrand48Ptr
      .asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>(isLeaf: true);

  ffi.Pointer<ffi.Char> l64a(
    int arg0,
  ) {
    return _l64a(
      arg0,
    );
  }

  late final _l64aPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a =
      _l64aPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>(isLeaf: true);

  void lcong48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _lcong48(
      arg0,
    );
  }

  late final _lcong48Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>(
      'lcong48');
  late final _lcong48 = _lcong48Ptr
      .asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>(isLeaf: true);

  int lrand48() {
    return _lrand48();
  }

  late final _lrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand48 = _lrand48Ptr.asFunction<int Function()>(isLeaf: true);

  ffi.Pointer<ffi.Char> mktemp(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _mktemp(
      arg0,
    );
  }

  late final _mktempPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp = _mktempPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>(
          isLeaf: true);

  int mkstemp(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _mkstemp(
      arg0,
    );
  }

  late final _mkstempPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp =
      _mkstempPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>(isLeaf: true);

  int mrand48() {
    return _mrand48();
  }

  late final _mrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand48 = _mrand48Ptr.asFunction<int Function()>(isLeaf: true);

  int nrand48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _nrand48(
      arg0,
    );
  }

  late final _nrand48Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>(
      'nrand48');
  late final _nrand48 = _nrand48Ptr
      .asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>(isLeaf: true);

  int posix_openpt(
    int arg0,
  ) {
    return _posix_openpt(
      arg0,
    );
  }

  late final _posix_openptPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('posix_openpt');
  late final _posix_openpt =
      _posix_openptPtr.asFunction<int Function(int)>(isLeaf: true);

  ffi.Pointer<ffi.Char> ptsname(
    int arg0,
  ) {
    return _ptsname(
      arg0,
    );
  }

  late final _ptsnamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'ptsname');
  late final _ptsname =
      _ptsnamePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>(isLeaf: true);

  int ptsname_r(
    int fildes,
    ffi.Pointer<ffi.Char> buffer,
    int buflen,
  ) {
    return _ptsname_r(
      fildes,
      buffer,
      buflen,
    );
  }

  late final _ptsname_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>>('ptsname_r');
  late final _ptsname_r = _ptsname_rPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>(isLeaf: true);

  int putenv(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _putenv(
      arg0,
    );
  }

  late final _putenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv =
      _putenvPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>(isLeaf: true);

  int random() {
    return _random();
  }

  late final _randomPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random = _randomPtr.asFunction<int Function()>(isLeaf: true);

  int rand_r(
    ffi.Pointer<ffi.UnsignedInt> arg0,
  ) {
    return _rand_r(
      arg0,
    );
  }

  late final _rand_rPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r = _rand_rPtr
      .asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>(isLeaf: true);

  ffi.Pointer<ffi.Char> realpath(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _realpath(
      arg0,
      arg1,
    );
  }

  late final _realpathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath = _realpathPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(isLeaf: true);

  ffi.Pointer<ffi.UnsignedShort> seed48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _seed48(
      arg0,
    );
  }

  late final _seed48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed48 = _seed48Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>(isLeaf: true);

  int setenv(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __overwrite,
  ) {
    return _setenv(
      __name,
      __value,
      __overwrite,
    );
  }

  late final _setenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv = _setenvPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>(isLeaf: true);

  int setkey(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _setkey(
      arg0,
    );
  }

  late final _setkeyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'setkey');
  late final _setkey =
      _setkeyPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>(isLeaf: true);

  ffi.Pointer<ffi.Char> setstate(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _setstate(
      arg0,
    );
  }

  late final _setstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate = _setstatePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>(
          isLeaf: true);

  void srand48(
    int arg0,
  ) {
    return _srand48(
      arg0,
    );
  }

  late final _srand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand48 =
      _srand48Ptr.asFunction<void Function(int)>(isLeaf: true);

  void srandom(
    int arg0,
  ) {
    return _srandom(
      arg0,
    );
  }

  late final _srandomPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedLong)>>(
          'srandom');
  late final _srandom =
      _srandomPtr.asFunction<void Function(int)>(isLeaf: true);

  int unlockpt(
    int arg0,
  ) {
    return _unlockpt(
      arg0,
    );
  }

  late final _unlockptPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('unlockpt');
  late final _unlockpt =
      _unlockptPtr.asFunction<int Function(int)>(isLeaf: true);

  void unsetenv(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _unsetenv(
      arg0,
    );
  }

  late final _unsetenvPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv = _unsetenvPtr
      .asFunction<void Function(ffi.Pointer<ffi.Char>)>(isLeaf: true);

  int arc4random() {
    return _arc4random();
  }

  late final _arc4randomPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function()>>('arc4random');
  late final _arc4random =
      _arc4randomPtr.asFunction<int Function()>(isLeaf: true);

  void arc4random_addrandom(
    ffi.Pointer<ffi.UnsignedChar> arg0,
    int arg1,
  ) {
    return _arc4random_addrandom(
      arg0,
      arg1,
    );
  }

  late final _arc4random_addrandomPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.UnsignedChar>, ffi.Int)>>('arc4random_addrandom');
  late final _arc4random_addrandom = _arc4random_addrandomPtr
      .asFunction<void Function(ffi.Pointer<ffi.UnsignedChar>, int)>(
          isLeaf: true);

  void arc4random_buf(
    ffi.Pointer<ffi.Void> __buf,
    int __nbytes,
  ) {
    return _arc4random_buf(
      __buf,
      __nbytes,
    );
  }

  late final _arc4random_bufPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size)>>(
      'arc4random_buf');
  late final _arc4random_buf = _arc4random_bufPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>(isLeaf: true);

  void arc4random_stir() {
    return _arc4random_stir();
  }

  late final _arc4random_stirPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('arc4random_stir');
  late final _arc4random_stir =
      _arc4random_stirPtr.asFunction<void Function()>(isLeaf: true);

  int arc4random_uniform(
    int __upper_bound,
  ) {
    return _arc4random_uniform(
      __upper_bound,
    );
  }

  late final _arc4random_uniformPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Uint32)>>(
          'arc4random_uniform');
  late final _arc4random_uniform =
      _arc4random_uniformPtr.asFunction<int Function(int)>(isLeaf: true);

  ffi.Pointer<ffi.Char> cgetcap(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _cgetcap(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetcapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('cgetcap');
  late final _cgetcap = _cgetcapPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>(isLeaf: true);

  int cgetclose() {
    return _cgetclose();
  }

  late final _cgetclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('cgetclose');
  late final _cgetclose =
      _cgetclosePtr.asFunction<int Function()>(isLeaf: true);

  int cgetent(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _cgetent(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('cgetent');
  late final _cgetent = _cgetentPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Char>)>(isLeaf: true);

  int cgetfirst(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
  ) {
    return _cgetfirst(
      arg0,
      arg1,
    );
  }

  late final _cgetfirstPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('cgetfirst');
  late final _cgetfirst = _cgetfirstPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>(isLeaf: true);

  int cgetmatch(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _cgetmatch(
      arg0,
      arg1,
    );
  }

  late final _cgetmatchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('cgetmatch');
  late final _cgetmatch = _cgetmatchPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(
          isLeaf: true);

  int cgetnext(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
  ) {
    return _cgetnext(
      arg0,
      arg1,
    );
  }

  late final _cgetnextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('cgetnext');
  late final _cgetnext = _cgetnextPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>(isLeaf: true);

  int cgetnum(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Long> arg2,
  ) {
    return _cgetnum(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetnumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Long>)>>('cgetnum');
  late final _cgetnum = _cgetnumPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Long>)>(isLeaf: true);

  int cgetset(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _cgetset(
      arg0,
    );
  }

  late final _cgetsetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'cgetset');
  late final _cgetset =
      _cgetsetPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>(isLeaf: true);

  int cgetstr(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
  ) {
    return _cgetstr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('cgetstr');
  late final _cgetstr = _cgetstrPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>(isLeaf: true);

  int cgetustr(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
  ) {
    return _cgetustr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetustrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('cgetustr');
  late final _cgetustr = _cgetustrPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>(isLeaf: true);

  int daemon(
    int arg0,
    int arg1,
  ) {
    return _daemon(
      arg0,
      arg1,
    );
  }

  late final _daemonPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('daemon');
  late final _daemon =
      _daemonPtr.asFunction<int Function(int, int)>(isLeaf: true);

  ffi.Pointer<ffi.Char> devname(
    int arg0,
    int arg1,
  ) {
    return _devname(
      arg0,
      arg1,
    );
  }

  late final _devnamePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(dev_t, mode_t)>>(
      'devname');
  late final _devname = _devnamePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, int)>(isLeaf: true);

  ffi.Pointer<ffi.Char> devname_r(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Char> buf,
    int len,
  ) {
    return _devname_r(
      arg0,
      arg1,
      buf,
      len,
    );
  }

  late final _devname_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              dev_t, mode_t, ffi.Pointer<ffi.Char>, ffi.Int)>>('devname_r');
  late final _devname_r = _devname_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          int, int, ffi.Pointer<ffi.Char>, int)>(isLeaf: true);

  ffi.Pointer<ffi.Char> getbsize(
    ffi.Pointer<ffi.Int> arg0,
    ffi.Pointer<ffi.Long> arg1,
  ) {
    return _getbsize(
      arg0,
      arg1,
    );
  }

  late final _getbsizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Long>)>>('getbsize');
  late final _getbsize = _getbsizePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Long>)>(isLeaf: true);

  int getloadavg(
    ffi.Pointer<ffi.Double> arg0,
    int arg1,
  ) {
    return _getloadavg(
      arg0,
      arg1,
    );
  }

  late final _getloadavgPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>(
      'getloadavg');
  late final _getloadavg = _getloadavgPtr
      .asFunction<int Function(ffi.Pointer<ffi.Double>, int)>(isLeaf: true);

  ffi.Pointer<ffi.Char> getprogname() {
    return _getprogname();
  }

  late final _getprognamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'getprogname');
  late final _getprogname = _getprognamePtr
      .asFunction<ffi.Pointer<ffi.Char> Function()>(isLeaf: true);

  void setprogname(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _setprogname(
      arg0,
    );
  }

  late final _setprognamePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'setprogname');
  late final _setprogname = _setprognamePtr
      .asFunction<void Function(ffi.Pointer<ffi.Char>)>(isLeaf: true);

  int heapsort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _heapsort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _heapsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('heapsort');
  late final _heapsort = _heapsortPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>)>(isLeaf: true);

  int mergesort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _mergesort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _mergesortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('mergesort');
  late final _mergesort = _mergesortPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>)>(isLeaf: true);

  void psort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _psort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _psortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('psort');
  late final _psort = _psortPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>)>(isLeaf: true);

  void psort_r(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.Void> arg3,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                    ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _psort_r(
      __base,
      __nel,
      __width,
      arg3,
      __compar,
    );
  }

  late final _psort_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('psort_r');
  late final _psort_r = _psort_rPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>)>(isLeaf: true);

  void qsort_r(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.Void> arg3,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                    ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _qsort_r(
      __base,
      __nel,
      __width,
      arg3,
      __compar,
    );
  }

  late final _qsort_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('qsort_r');
  late final _qsort_r = _qsort_rPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>)>(isLeaf: true);

  int radixsort(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> __base,
    int __nel,
    ffi.Pointer<ffi.UnsignedChar> __table,
    int __endbyte,
  ) {
    return _radixsort(
      __base,
      __nel,
      __table,
      __endbyte,
    );
  }

  late final _radixsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>, ffi.UnsignedInt)>>('radixsort');
  late final _radixsort = _radixsortPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int,
          ffi.Pointer<ffi.UnsignedChar>, int)>(isLeaf: true);

  int rpmatch(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _rpmatch(
      arg0,
    );
  }

  late final _rpmatchPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch =
      _rpmatchPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>(isLeaf: true);

  int sradixsort(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> __base,
    int __nel,
    ffi.Pointer<ffi.UnsignedChar> __table,
    int __endbyte,
  ) {
    return _sradixsort(
      __base,
      __nel,
      __table,
      __endbyte,
    );
  }

  late final _sradixsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>, ffi.UnsignedInt)>>('sradixsort');
  late final _sradixsort = _sradixsortPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int,
          ffi.Pointer<ffi.UnsignedChar>, int)>(isLeaf: true);

  void sranddev() {
    return _sranddev();
  }

  late final _sranddevPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('sranddev');
  late final _sranddev = _sranddevPtr.asFunction<void Function()>(isLeaf: true);

  void srandomdev() {
    return _srandomdev();
  }

  late final _srandomdevPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('srandomdev');
  late final _srandomdev =
      _srandomdevPtr.asFunction<void Function()>(isLeaf: true);

  ffi.Pointer<ffi.Void> reallocf(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _reallocf(
      __ptr,
      __size,
    );
  }

  late final _reallocfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('reallocf');
  late final _reallocf = _reallocfPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>(
          isLeaf: true);

  int strtonum(
    ffi.Pointer<ffi.Char> __numstr,
    int __minval,
    int __maxval,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __errstrp,
  ) {
    return _strtonum(
      __numstr,
      __minval,
      __maxval,
      __errstrp,
    );
  }

  late final _strtonumPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>, ffi.LongLong,
              ffi.LongLong, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtonum');
  late final _strtonum = _strtonumPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>(isLeaf: true);

  int strtoq(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtoqPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq = _strtoqPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int)>(isLeaf: true);

  int strtouq(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtouqPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq = _strtouqPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int)>(isLeaf: true);

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _suboptarg =
      _lookup<ffi.Pointer<ffi.Char>>('suboptarg');

  ffi.Pointer<ffi.Char> get suboptarg => _suboptarg.value;

  set suboptarg(ffi.Pointer<ffi.Char> value) => _suboptarg.value = value;

  int bcmp(
    ffi.Pointer<ffi.Void> s1,
    ffi.Pointer<ffi.Void> s2,
    int n,
  ) {
    return _bcmp(
      s1,
      s2,
      n,
    );
  }

  late final _bcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Size)>>('bcmp');
  late final _bcmp = _bcmpPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>(isLeaf: true);

  int memcmp(
    ffi.Pointer<ffi.Void> s1,
    ffi.Pointer<ffi.Void> s2,
    int n,
  ) {
    return _memcmp(
      s1,
      s2,
      n,
    );
  }

  late final _memcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('memcmp');
  late final _memcmp = _memcmpPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>(isLeaf: true);

  int timingsafe_bcmp(
    ffi.Pointer<ffi.Void> b1,
    ffi.Pointer<ffi.Void> b2,
    int n,
  ) {
    return _timingsafe_bcmp(
      b1,
      b2,
      n,
    );
  }

  late final _timingsafe_bcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('timingsafe_bcmp');
  late final _timingsafe_bcmp = _timingsafe_bcmpPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>(isLeaf: true);

  void bzero(
    ffi.Pointer<ffi.Void> s,
    int n,
  ) {
    return _bzero(
      s,
      n,
    );
  }

  late final _bzeroPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size)>>(
      'bzero');
  late final _bzero = _bzeroPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>(isLeaf: true);

  ffi.Pointer<ffi.Void> memset(
    ffi.Pointer<ffi.Void> s,
    int c,
    int n,
  ) {
    return _memset(
      s,
      c,
      n,
    );
  }

  late final _memsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Size)>>('memset');
  late final _memset = _memsetPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, int, int)>(isLeaf: true);

  int memset_s(
    ffi.Pointer<ffi.Void> s,
    int smax,
    int c,
    int n,
  ) {
    return _memset_s(
      s,
      smax,
      c,
      n,
    );
  }

  late final _memset_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Size, ffi.Int, ffi.Size)>>('memset_s');
  late final _memset_s = _memset_sPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int, int, int)>(
          isLeaf: true);

  ffi.Pointer<ffi.Void> memcpy(
    ffi.Pointer<ffi.Void> dst,
    ffi.Pointer<ffi.Void> src,
    int n,
  ) {
    return _memcpy(
      dst,
      src,
      n,
    );
  }

  late final _memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('memcpy');
  late final _memcpy = _memcpyPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>(isLeaf: true);

  ffi.Pointer<ffi.Void> memmove(
    ffi.Pointer<ffi.Void> dst,
    ffi.Pointer<ffi.Void> src,
    int n,
  ) {
    return _memmove(
      dst,
      src,
      n,
    );
  }

  late final _memmovePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('memmove');
  late final _memmove = _memmovePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>(isLeaf: true);

  void bcopy(
    ffi.Pointer<ffi.Void> src,
    ffi.Pointer<ffi.Void> dst,
    int n,
  ) {
    return _bcopy(
      src,
      dst,
      n,
    );
  }

  late final _bcopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('bcopy');
  late final _bcopy = _bcopyPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>(isLeaf: true);

  int strlen(
    ffi.Pointer<ffi.Char> s,
  ) {
    return _strlen(
      s,
    );
  }

  late final _strlenPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>)>>(
      'strlen');
  late final _strlen =
      _strlenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>(isLeaf: true);

  int strnlen(
    ffi.Pointer<ffi.Char> s,
    int n,
  ) {
    return _strnlen(
      s,
      n,
    );
  }

  late final _strnlenPtr = _lookup<
          ffi
          .NativeFunction<ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Size)>>(
      'strnlen');
  late final _strnlen = _strnlenPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int)>(isLeaf: true);

  int strcmp(
    ffi.Pointer<ffi.Char> s1,
    ffi.Pointer<ffi.Char> s2,
  ) {
    return _strcmp(
      s1,
      s2,
    );
  }

  late final _strcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcmp');
  late final _strcmp = _strcmpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(
          isLeaf: true);

  int strncmp(
    ffi.Pointer<ffi.Char> s1,
    ffi.Pointer<ffi.Char> s2,
    int n,
  ) {
    return _strncmp(
      s1,
      s2,
      n,
    );
  }

  late final _strncmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('strncmp');
  late final _strncmp = _strncmpPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>(isLeaf: true);

  int strprefix(
    ffi.Pointer<ffi.Char> s1,
    ffi.Pointer<ffi.Char> s2,
  ) {
    return _strprefix(
      s1,
      s2,
    );
  }

  late final _strprefixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strprefix');
  late final _strprefix = _strprefixPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(
          isLeaf: true);

  int strcasecmp(
    ffi.Pointer<ffi.Char> s1,
    ffi.Pointer<ffi.Char> s2,
  ) {
    return _strcasecmp(
      s1,
      s2,
    );
  }

  late final _strcasecmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcasecmp');
  late final _strcasecmp = _strcasecmpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(
          isLeaf: true);

  int strncasecmp(
    ffi.Pointer<ffi.Char> s1,
    ffi.Pointer<ffi.Char> s2,
    int n,
  ) {
    return _strncasecmp(
      s1,
      s2,
      n,
    );
  }

  late final _strncasecmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('strncasecmp');
  late final _strncasecmp = _strncasecmpPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>(isLeaf: true);

  ffi.Pointer<ffi.Char> strchr(
    ffi.Pointer<ffi.Char> s,
    int c,
  ) {
    return _strchr(
      s,
      c,
    );
  }

  late final _strchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strchr');
  late final _strchr = _strchrPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>(
          isLeaf: true);

  ffi.Pointer<ffi.Char> strnstr(
    ffi.Pointer<ffi.Char> s,
    ffi.Pointer<ffi.Char> find,
    int slen,
  ) {
    return _strnstr(
      s,
      find,
      slen,
    );
  }

  late final _strnstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strnstr');
  late final _strnstr = _strnstrPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>(isLeaf: true);

  int strlcpy(
    ffi.Pointer<ffi.Char> dst,
    ffi.Pointer<ffi.Char> src,
    int n,
  ) {
    return _strlcpy(
      dst,
      src,
      n,
    );
  }

  late final _strlcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strlcpy');
  late final _strlcpy = _strlcpyPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>(isLeaf: true);

  int strlcat(
    ffi.Pointer<ffi.Char> dst,
    ffi.Pointer<ffi.Char> src,
    int n,
  ) {
    return _strlcat(
      dst,
      src,
      n,
    );
  }

  late final _strlcatPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strlcat');
  late final _strlcat = _strlcatPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>(isLeaf: true);

  ffi.Pointer<ffi.Char> strncat(
    ffi.Pointer<ffi.Char> dst,
    ffi.Pointer<ffi.Char> src,
    int n,
  ) {
    return _strncat(
      dst,
      src,
      n,
    );
  }

  late final _strncatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strncat');
  late final _strncat = _strncatPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>(isLeaf: true);

  ffi.Pointer<ffi.Char> strncpy(
    ffi.Pointer<ffi.Char> dst,
    ffi.Pointer<ffi.Char> src,
    int n,
  ) {
    return _strncpy(
      dst,
      src,
      n,
    );
  }

  late final _strncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strncpy');
  late final _strncpy = _strncpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>(isLeaf: true);

  ffi.Pointer<ffi.Char> strcpy(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _strcpy(
      arg0,
      arg1,
    );
  }

  late final _strcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcpy');
  late final _strcpy = _strcpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(isLeaf: true);

  ffi.Pointer<ffi.Char> strcat(
    ffi.Pointer<ffi.Char> dst,
    ffi.Pointer<ffi.Char> src,
  ) {
    return _strcat(
      dst,
      src,
    );
  }

  late final _strcatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcat');
  late final _strcat = _strcatPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(isLeaf: true);

  ffi.Pointer<ffi.Char> STRDUP(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _STRDUP(
      arg0,
      arg1,
    );
  }

  late final _STRDUPPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('STRDUP');
  late final _STRDUP = _STRDUPPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>(isLeaf: true);

  mab_audio_encoder_config mab_audio_encoder_config_init(
    int encodingFormat,
    int format,
    int sampleRate,
    int channels,
  ) {
    return _mab_audio_encoder_config_init(
      encodingFormat,
      format,
      sampleRate,
      channels,
    );
  }

  late final _mab_audio_encoder_config_initPtr = _lookup<
      ffi.NativeFunction<
          mab_audio_encoder_config Function(ffi.Int32, ffi.Int32, ffi.Int,
              ffi.Int)>>('mab_audio_encoder_config_init');
  late final _mab_audio_encoder_config_init = _mab_audio_encoder_config_initPtr
      .asFunction<mab_audio_encoder_config Function(int, int, int, int)>(
          isLeaf: true);

  int mab_audio_encoder_init(
    ffi.Pointer<mab_audio_encoder> pEncoder,
    mab_audio_encoder_config config,
    mab_audio_encoder_write_proc onWrite,
    mab_audio_encoder_seek_proc onSeek,
    ffi.Pointer<ffi.Void> pUserData,
  ) {
    return _mab_audio_encoder_init(
      pEncoder,
      config,
      onWrite,
      onSeek,
      pUserData,
    );
  }

  late final _mab_audio_encoder_initPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(
              ffi.Pointer<mab_audio_encoder>,
              mab_audio_encoder_config,
              mab_audio_encoder_write_proc,
              mab_audio_encoder_seek_proc,
              ffi.Pointer<ffi.Void>)>>('mab_audio_encoder_init');
  late final _mab_audio_encoder_init = _mab_audio_encoder_initPtr.asFunction<
      int Function(
          ffi.Pointer<mab_audio_encoder>,
          mab_audio_encoder_config,
          mab_audio_encoder_write_proc,
          mab_audio_encoder_seek_proc,
          ffi.Pointer<ffi.Void>)>();

  int mab_audio_encoder_init_file(
    ffi.Pointer<mab_audio_encoder> pEncoder,
    ffi.Pointer<ffi.Char> pFilePath,
    mab_audio_encoder_config config,
  ) {
    return _mab_audio_encoder_init_file(
      pEncoder,
      pFilePath,
      config,
    );
  }

  late final _mab_audio_encoder_init_filePtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(
              ffi.Pointer<mab_audio_encoder>,
              ffi.Pointer<ffi.Char>,
              mab_audio_encoder_config)>>('mab_audio_encoder_init_file');
  late final _mab_audio_encoder_init_file =
      _mab_audio_encoder_init_filePtr.asFunction<
          int Function(ffi.Pointer<mab_audio_encoder>, ffi.Pointer<ffi.Char>,
              mab_audio_encoder_config)>(isLeaf: true);

  int mab_audio_encoder_encode(
    ffi.Pointer<mab_audio_encoder> pEncoder,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
    ffi.Pointer<uint64> pFramesWritten,
  ) {
    return _mab_audio_encoder_encode(
      pEncoder,
      pFramesIn,
      frameCount,
      pFramesWritten,
    );
  }

  late final _mab_audio_encoder_encodePtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(
              ffi.Pointer<mab_audio_encoder>,
              ffi.Pointer<ffi.Void>,
              uint64,
              ffi.Pointer<uint64>)>>('mab_audio_encoder_encode');
  late final _mab_audio_encoder_encode =
      _mab_audio_encoder_encodePtr.asFunction<
          int Function(ffi.Pointer<mab_audio_encoder>, ffi.Pointer<ffi.Void>,
              int, ffi.Pointer<uint64>)>();

  void mab_audio_encoder_uninit(
    ffi.Pointer<mab_audio_encoder> pEncoder,
  ) {
    return _mab_audio_encoder_uninit(
      pEncoder,
    );
  }

  late final _mab_audio_encoder_uninitPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<mab_audio_encoder>)>>(
      'mab_audio_encoder_uninit');
  late final _mab_audio_encoder_uninit = _mab_audio_encoder_uninitPtr
      .asFunction<void Function(ffi.Pointer<mab_audio_encoder>)>();

  int dart_bridge_init(
    ffi.Pointer<ffi.Void> pData,
  ) {
    return _dart_bridge_init(
      pData,
    );
  }

  late final _dart_bridge_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'dart_bridge_init');
  late final _dart_bridge_init = _dart_bridge_initPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>(isLeaf: true);

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stdinp =
      _lookup<ffi.Pointer<FILE>>('__stdinp');

  ffi.Pointer<FILE> get __stdinp => ___stdinp.value;

  set __stdinp(ffi.Pointer<FILE> value) => ___stdinp.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stdoutp =
      _lookup<ffi.Pointer<FILE>>('__stdoutp');

  ffi.Pointer<FILE> get __stdoutp => ___stdoutp.value;

  set __stdoutp(ffi.Pointer<FILE> value) => ___stdoutp.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stderrp =
      _lookup<ffi.Pointer<FILE>>('__stderrp');

  ffi.Pointer<FILE> get __stderrp => ___stderrp.value;

  set __stderrp(ffi.Pointer<FILE> value) => ___stderrp.value = value;

  void clearerr(
    ffi.Pointer<FILE> arg0,
  ) {
    return _clearerr(
      arg0,
    );
  }

  late final _clearerrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr =
      _clearerrPtr.asFunction<void Function(ffi.Pointer<FILE>)>(isLeaf: true);

  int fclose(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fclose(
      arg0,
    );
  }

  late final _fclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose =
      _fclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>(isLeaf: true);

  int feof(
    ffi.Pointer<FILE> arg0,
  ) {
    return _feof(
      arg0,
    );
  }

  late final _feofPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof =
      _feofPtr.asFunction<int Function(ffi.Pointer<FILE>)>(isLeaf: true);

  int ferror(
    ffi.Pointer<FILE> arg0,
  ) {
    return _ferror(
      arg0,
    );
  }

  late final _ferrorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror =
      _ferrorPtr.asFunction<int Function(ffi.Pointer<FILE>)>(isLeaf: true);

  int fflush(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fflush(
      arg0,
    );
  }

  late final _fflushPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush =
      _fflushPtr.asFunction<int Function(ffi.Pointer<FILE>)>(isLeaf: true);

  int fgetc(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fgetc(
      arg0,
    );
  }

  late final _fgetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc =
      _fgetcPtr.asFunction<int Function(ffi.Pointer<FILE>)>(isLeaf: true);

  int fgetpos(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<fpos_t> arg1,
  ) {
    return _fgetpos(
      arg0,
      arg1,
    );
  }

  late final _fgetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos = _fgetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>(
          isLeaf: true);

  ffi.Pointer<ffi.Char> fgets(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    ffi.Pointer<FILE> arg2,
  ) {
    return _fgets(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fgetsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets = _fgetsPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>(isLeaf: true);

  ffi.Pointer<FILE> fopen(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __mode,
  ) {
    return _fopen(
      __filename,
      __mode,
    );
  }

  late final _fopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen = _fopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(isLeaf: true);

  int fprintf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fprintf(
      arg0,
      arg1,
    );
  }

  late final _fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fprintf');
  late final _fprintf = _fprintfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>(
          isLeaf: true);

  int fputc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _fputc(
      arg0,
      arg1,
    );
  }

  late final _fputcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc =
      _fputcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>(isLeaf: true);

  int fputs(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _fputs(
      arg0,
      arg1,
    );
  }

  late final _fputsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs = _fputsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>(
          isLeaf: true);

  int fread(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __nitems,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread(
      __ptr,
      __size,
      __nitems,
      __stream,
    );
  }

  late final _freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread = _freadPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>(isLeaf: true);

  ffi.Pointer<FILE> freopen(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<FILE> arg2,
  ) {
    return _freopen(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _freopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen = _freopenPtr.asFunction<
      ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<FILE>)>(isLeaf: true);

  int fscanf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fscanf(
      arg0,
      arg1,
    );
  }

  late final _fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf = _fscanfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>(
          isLeaf: true);

  int fseek(
    ffi.Pointer<FILE> arg0,
    int arg1,
    int arg2,
  ) {
    return _fseek(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fseekPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek = _fseekPtr
      .asFunction<int Function(ffi.Pointer<FILE>, int, int)>(isLeaf: true);

  int fsetpos(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<fpos_t> arg1,
  ) {
    return _fsetpos(
      arg0,
      arg1,
    );
  }

  late final _fsetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos = _fsetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>(
          isLeaf: true);

  int ftell(
    ffi.Pointer<FILE> arg0,
  ) {
    return _ftell(
      arg0,
    );
  }

  late final _ftellPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell =
      _ftellPtr.asFunction<int Function(ffi.Pointer<FILE>)>(isLeaf: true);

  int fwrite(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __nitems,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite(
      __ptr,
      __size,
      __nitems,
      __stream,
    );
  }

  late final _fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite = _fwritePtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>(isLeaf: true);

  int getc(
    ffi.Pointer<FILE> arg0,
  ) {
    return _getc(
      arg0,
    );
  }

  late final _getcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc =
      _getcPtr.asFunction<int Function(ffi.Pointer<FILE>)>(isLeaf: true);

  int getchar() {
    return _getchar();
  }

  late final _getcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar = _getcharPtr.asFunction<int Function()>(isLeaf: true);

  ffi.Pointer<ffi.Char> gets(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _gets(
      arg0,
    );
  }

  late final _getsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('gets');
  late final _gets = _getsPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>(
          isLeaf: true);

  void perror(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _perror(
      arg0,
    );
  }

  late final _perrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror =
      _perrorPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>(isLeaf: true);

  int printf(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _printf(
      arg0,
    );
  }

  late final _printfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'printf');
  late final _printf =
      _printfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>(isLeaf: true);

  int putc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _putc(
      arg0,
      arg1,
    );
  }

  late final _putcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc =
      _putcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>(isLeaf: true);

  int putchar(
    int arg0,
  ) {
    return _putchar(
      arg0,
    );
  }

  late final _putcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar = _putcharPtr.asFunction<int Function(int)>(isLeaf: true);

  int puts(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _puts(
      arg0,
    );
  }

  late final _putsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts =
      _putsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>(isLeaf: true);

  int remove(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _remove(
      arg0,
    );
  }

  late final _removePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove =
      _removePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>(isLeaf: true);

  int rename(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename(
      __old,
      __new,
    );
  }

  late final _renamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename = _renamePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(
          isLeaf: true);

  void rewind(
    ffi.Pointer<FILE> arg0,
  ) {
    return _rewind(
      arg0,
    );
  }

  late final _rewindPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind =
      _rewindPtr.asFunction<void Function(ffi.Pointer<FILE>)>(isLeaf: true);

  int scanf(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _scanf(
      arg0,
    );
  }

  late final _scanfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf =
      _scanfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>(isLeaf: true);

  void setbuf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _setbuf(
      arg0,
      arg1,
    );
  }

  late final _setbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf = _setbufPtr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>(
          isLeaf: true);

  int setvbuf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    int arg3,
  ) {
    return _setvbuf(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _setvbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Size)>>('setvbuf');
  late final _setvbuf = _setvbufPtr.asFunction<
      int Function(
          ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>(isLeaf: true);

  int sprintf(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _sprintf(
      arg0,
      arg1,
    );
  }

  late final _sprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sprintf');
  late final _sprintf = _sprintfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(
          isLeaf: true);

  int sscanf(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _sscanf(
      arg0,
      arg1,
    );
  }

  late final _sscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf = _sscanfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(
          isLeaf: true);

  ffi.Pointer<FILE> tmpfile() {
    return _tmpfile();
  }

  late final _tmpfilePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile =
      _tmpfilePtr.asFunction<ffi.Pointer<FILE> Function()>(isLeaf: true);

  ffi.Pointer<ffi.Char> tmpnam(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tmpnam(
      arg0,
    );
  }

  late final _tmpnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam = _tmpnamPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>(
          isLeaf: true);

  int ungetc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _ungetc(
      arg0,
      arg1,
    );
  }

  late final _ungetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc =
      _ungetcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>(isLeaf: true);

  int vfprintf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return _vfprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vfprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>>('vfprintf');
  late final _vfprintf = _vfprintfPtr.asFunction<
      int Function(
          ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>(isLeaf: true);

  int vprintf(
    ffi.Pointer<ffi.Char> arg0,
    va_list arg1,
  ) {
    return _vprintf(
      arg0,
      arg1,
    );
  }

  late final _vprintfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, va_list)>>(
      'vprintf');
  late final _vprintf = _vprintfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, va_list)>(isLeaf: true);

  int vsprintf(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return _vsprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vsprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              va_list)>>('vsprintf');
  late final _vsprintf = _vsprintfPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, va_list)>(isLeaf: true);

  ffi.Pointer<ffi.Char> ctermid(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _ctermid(
      arg0,
    );
  }

  late final _ctermidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid = _ctermidPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>(
          isLeaf: true);

  ffi.Pointer<FILE> fdopen(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fdopen(
      arg0,
      arg1,
    );
  }

  late final _fdopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen = _fdopenPtr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>(
          isLeaf: true);

  int fileno(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fileno(
      arg0,
    );
  }

  late final _filenoPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno =
      _filenoPtr.asFunction<int Function(ffi.Pointer<FILE>)>(isLeaf: true);

  int pclose(
    ffi.Pointer<FILE> arg0,
  ) {
    return _pclose(
      arg0,
    );
  }

  late final _pclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose =
      _pclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>(isLeaf: true);

  ffi.Pointer<FILE> popen(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _popen(
      arg0,
      arg1,
    );
  }

  late final _popenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('popen');
  late final _popen = _popenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(isLeaf: true);

  int __srget(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___srget(
      arg0,
    );
  }

  late final ___srgetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '__srget');
  late final ___srget =
      ___srgetPtr.asFunction<int Function(ffi.Pointer<FILE>)>(isLeaf: true);

  int __svfscanf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return ___svfscanf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___svfscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
              va_list)>>('__svfscanf');
  late final ___svfscanf = ___svfscanfPtr.asFunction<
      int Function(
          ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>(isLeaf: true);

  int __swbuf(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return ___swbuf(
      arg0,
      arg1,
    );
  }

  late final ___swbufPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          '__swbuf');
  late final ___swbuf = ___swbufPtr
      .asFunction<int Function(int, ffi.Pointer<FILE>)>(isLeaf: true);

  void flockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    return _flockfile(
      arg0,
    );
  }

  late final _flockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile =
      _flockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>(isLeaf: true);

  int ftrylockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    return _ftrylockfile(
      arg0,
    );
  }

  late final _ftrylockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile = _ftrylockfilePtr
      .asFunction<int Function(ffi.Pointer<FILE>)>(isLeaf: true);

  void funlockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    return _funlockfile(
      arg0,
    );
  }

  late final _funlockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile = _funlockfilePtr
      .asFunction<void Function(ffi.Pointer<FILE>)>(isLeaf: true);

  int getc_unlocked(
    ffi.Pointer<FILE> arg0,
  ) {
    return _getc_unlocked(
      arg0,
    );
  }

  late final _getc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked = _getc_unlockedPtr
      .asFunction<int Function(ffi.Pointer<FILE>)>(isLeaf: true);

  int getchar_unlocked() {
    return _getchar_unlocked();
  }

  late final _getchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked =
      _getchar_unlockedPtr.asFunction<int Function()>(isLeaf: true);

  int putc_unlocked(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _putc_unlocked(
      arg0,
      arg1,
    );
  }

  late final _putc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc_unlocked');
  late final _putc_unlocked = _putc_unlockedPtr
      .asFunction<int Function(int, ffi.Pointer<FILE>)>(isLeaf: true);

  int putchar_unlocked(
    int arg0,
  ) {
    return _putchar_unlocked(
      arg0,
    );
  }

  late final _putchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'putchar_unlocked');
  late final _putchar_unlocked =
      _putchar_unlockedPtr.asFunction<int Function(int)>(isLeaf: true);

  int getw(
    ffi.Pointer<FILE> arg0,
  ) {
    return _getw(
      arg0,
    );
  }

  late final _getwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw =
      _getwPtr.asFunction<int Function(ffi.Pointer<FILE>)>(isLeaf: true);

  int putw(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _putw(
      arg0,
      arg1,
    );
  }

  late final _putwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw =
      _putwPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>(isLeaf: true);

  ffi.Pointer<ffi.Char> tempnam(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __prefix,
  ) {
    return _tempnam(
      __dir,
      __prefix,
    );
  }

  late final _tempnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam = _tempnamPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(isLeaf: true);

  int fseeko(
    ffi.Pointer<FILE> __stream,
    int __offset,
    int __whence,
  ) {
    return _fseeko(
      __stream,
      __offset,
      __whence,
    );
  }

  late final _fseekoPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<FILE>, off_t, ffi.Int)>>(
      'fseeko');
  late final _fseeko = _fseekoPtr
      .asFunction<int Function(ffi.Pointer<FILE>, int, int)>(isLeaf: true);

  int ftello(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello(
      __stream,
    );
  }

  late final _ftelloPtr =
      _lookup<ffi.NativeFunction<off_t Function(ffi.Pointer<FILE>)>>('ftello');
  late final _ftello =
      _ftelloPtr.asFunction<int Function(ffi.Pointer<FILE>)>(isLeaf: true);

  int snprintf(
    ffi.Pointer<ffi.Char> __str,
    int __size,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf(
      __str,
      __size,
      __format,
    );
  }

  late final _snprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('snprintf');
  late final _snprintf = _snprintfPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>(isLeaf: true);

  int vfscanf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
    va_list arg2,
  ) {
    return _vfscanf(
      __stream,
      __format,
      arg2,
    );
  }

  late final _vfscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>>('vfscanf');
  late final _vfscanf = _vfscanfPtr.asFunction<
      int Function(
          ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>(isLeaf: true);

  int vscanf(
    ffi.Pointer<ffi.Char> __format,
    va_list arg1,
  ) {
    return _vscanf(
      __format,
      arg1,
    );
  }

  late final _vscanfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, va_list)>>(
      'vscanf');
  late final _vscanf = _vscanfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, va_list)>(isLeaf: true);

  int vsnprintf(
    ffi.Pointer<ffi.Char> __str,
    int __size,
    ffi.Pointer<ffi.Char> __format,
    va_list arg3,
  ) {
    return _vsnprintf(
      __str,
      __size,
      __format,
      arg3,
    );
  }

  late final _vsnprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>, va_list)>>('vsnprintf');
  late final _vsnprintf = _vsnprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          va_list)>(isLeaf: true);

  int vsscanf(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Char> __format,
    va_list arg2,
  ) {
    return _vsscanf(
      __str,
      __format,
      arg2,
    );
  }

  late final _vsscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              va_list)>>('vsscanf');
  late final _vsscanf = _vsscanfPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, va_list)>(isLeaf: true);

  int dprintf(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _dprintf(
      arg0,
      arg1,
    );
  }

  late final _dprintfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'dprintf');
  late final _dprintf = _dprintfPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>)>(isLeaf: true);

  int vdprintf(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return _vdprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vdprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, va_list)>>('vdprintf');
  late final _vdprintf = _vdprintfPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, va_list)>(
          isLeaf: true);

  int getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __linep,
    ffi.Pointer<ffi.Size> __linecapp,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim(
      __linep,
      __linecapp,
      __delimiter,
      __stream,
    );
  }

  late final _getdelimPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>, ffi.Int, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim = _getdelimPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>,
          int, ffi.Pointer<FILE>)>(isLeaf: true);

  int getline(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __linep,
    ffi.Pointer<ffi.Size> __linecapp,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline(
      __linep,
      __linecapp,
      __stream,
    );
  }

  late final _getlinePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>, ffi.Pointer<FILE>)>>('getline');
  late final _getline = _getlinePtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<FILE>)>(isLeaf: true);

  ffi.Pointer<FILE> fmemopen(
    ffi.Pointer<ffi.Void> __buf,
    int __size,
    ffi.Pointer<ffi.Char> __mode,
  ) {
    return _fmemopen(
      __buf,
      __size,
      __mode,
    );
  }

  late final _fmemopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('fmemopen');
  late final _fmemopen = _fmemopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>(isLeaf: true);

  ffi.Pointer<FILE> open_memstream(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __bufp,
    ffi.Pointer<ffi.Size> __sizep,
  ) {
    return _open_memstream(
      __bufp,
      __sizep,
    );
  }

  late final _open_memstreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>)>>('open_memstream');
  late final _open_memstream = _open_memstreamPtr.asFunction<
      ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Size>)>(isLeaf: true);

  late final ffi.Pointer<ffi.Int> _sys_nerr = _lookup<ffi.Int>('sys_nerr');

  int get sys_nerr => _sys_nerr.value;

  set sys_nerr(int value) => _sys_nerr.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _sys_errlist =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('sys_errlist');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get sys_errlist => _sys_errlist.value;

  set sys_errlist(ffi.Pointer<ffi.Pointer<ffi.Char>> value) =>
      _sys_errlist.value = value;

  int asprintf(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _asprintf(
      arg0,
      arg1,
    );
  }

  late final _asprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('asprintf');
  late final _asprintf = _asprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Char>)>(isLeaf: true);

  ffi.Pointer<ffi.Char> ctermid_r(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _ctermid_r(
      arg0,
    );
  }

  late final _ctermid_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid_r');
  late final _ctermid_r = _ctermid_rPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>(
          isLeaf: true);

  ffi.Pointer<ffi.Char> fgetln(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Size> arg1,
  ) {
    return _fgetln(
      arg0,
      arg1,
    );
  }

  late final _fgetlnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Size>)>>('fgetln');
  late final _fgetln = _fgetlnPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<FILE>, ffi.Pointer<ffi.Size>)>(isLeaf: true);

  ffi.Pointer<ffi.Char> fmtcheck(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fmtcheck(
      arg0,
      arg1,
    );
  }

  late final _fmtcheckPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fmtcheck');
  late final _fmtcheck = _fmtcheckPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(isLeaf: true);

  int fpurge(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fpurge(
      arg0,
    );
  }

  late final _fpurgePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fpurge');
  late final _fpurge =
      _fpurgePtr.asFunction<int Function(ffi.Pointer<FILE>)>(isLeaf: true);

  void setbuffer(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _setbuffer(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _setbufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('setbuffer');
  late final _setbuffer = _setbufferPtr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>(
          isLeaf: true);

  int setlinebuf(
    ffi.Pointer<FILE> arg0,
  ) {
    return _setlinebuf(
      arg0,
    );
  }

  late final _setlinebufPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf =
      _setlinebufPtr.asFunction<int Function(ffi.Pointer<FILE>)>(isLeaf: true);

  int vasprintf(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return _vasprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vasprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>, va_list)>>('vasprintf');
  late final _vasprintf = _vasprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>,
          va_list)>(isLeaf: true);

  ffi.Pointer<FILE> funopen(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>
        arg1,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>
        arg2,
    ffi.Pointer<
            ffi.NativeFunction<
                fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>>
        arg3,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>
        arg4,
  ) {
    return _funopen(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _funopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Char>, ffi.Int)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Char>, ffi.Int)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>)>>)>>('funopen');
  late final _funopen = _funopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<ffi.Void>)>>)>(isLeaf: true);

  int __sprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return ___sprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___sprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('__sprintf_chk');
  late final ___sprintf_chk = ___sprintf_chkPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Char>)>(
      isLeaf: true);

  int __snprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Char> arg4,
  ) {
    return ___snprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final ___snprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.Int, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('__snprintf_chk');
  late final ___snprintf_chk = ___snprintf_chkPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, int, int,
          ffi.Pointer<ffi.Char>)>(isLeaf: true);

  int __vsprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
    va_list arg4,
  ) {
    return ___vsprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final ___vsprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Size,
              ffi.Pointer<ffi.Char>, va_list)>>('__vsprintf_chk');
  late final ___vsprintf_chk = ___vsprintf_chkPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Char>,
          va_list)>(isLeaf: true);

  int __vsnprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Char> arg4,
    va_list arg5,
  ) {
    return ___vsnprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final ___vsnprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.Int, ffi.Size,
              ffi.Pointer<ffi.Char>, va_list)>>('__vsnprintf_chk');
  late final ___vsnprintf_chk = ___vsnprintf_chkPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, int, int, ffi.Pointer<ffi.Char>,
          va_list)>(isLeaf: true);

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _tzname =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('tzname');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get tzname => _tzname.value;

  set tzname(ffi.Pointer<ffi.Pointer<ffi.Char>> value) => _tzname.value = value;

  late final ffi.Pointer<ffi.Int> _getdate_err =
      _lookup<ffi.Int>('getdate_err');

  int get getdate_err => _getdate_err.value;

  set getdate_err(int value) => _getdate_err.value = value;

  late final ffi.Pointer<ffi.Int> _daylight = _lookup<ffi.Int>('daylight');

  int get daylight => _daylight.value;

  set daylight(int value) => _daylight.value = value;

  ffi.Pointer<ffi.Char> asctime(
    ffi.Pointer<tm> arg0,
  ) {
    return _asctime(
      arg0,
    );
  }

  late final _asctimePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>)>>(
      'asctime');
  late final _asctime =
      _asctimePtr.asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>)>(
          isLeaf: true);

  int clock() {
    return _clock();
  }

  late final _clockPtr =
      _lookup<ffi.NativeFunction<clock_t Function()>>('clock');
  late final _clock = _clockPtr.asFunction<int Function()>(isLeaf: true);

  ffi.Pointer<ffi.Char> ctime(
    ffi.Pointer<time_t> arg0,
  ) {
    return _ctime(
      arg0,
    );
  }

  late final _ctimePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<time_t>)>>(
      'ctime');
  late final _ctime =
      _ctimePtr.asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<time_t>)>(
          isLeaf: true);

  double difftime(
    int arg0,
    int arg1,
  ) {
    return _difftime(
      arg0,
      arg1,
    );
  }

  late final _difftimePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(time_t, time_t)>>(
          'difftime');
  late final _difftime =
      _difftimePtr.asFunction<double Function(int, int)>(isLeaf: true);

  ffi.Pointer<tm> getdate(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _getdate(
      arg0,
    );
  }

  late final _getdatePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<tm> Function(ffi.Pointer<ffi.Char>)>>(
      'getdate');
  late final _getdate =
      _getdatePtr.asFunction<ffi.Pointer<tm> Function(ffi.Pointer<ffi.Char>)>(
          isLeaf: true);

  ffi.Pointer<tm> gmtime(
    ffi.Pointer<time_t> arg0,
  ) {
    return _gmtime(
      arg0,
    );
  }

  late final _gmtimePtr = _lookup<
      ffi
      .NativeFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>>('gmtime');
  late final _gmtime = _gmtimePtr
      .asFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>(isLeaf: true);

  ffi.Pointer<tm> localtime(
    ffi.Pointer<time_t> arg0,
  ) {
    return _localtime(
      arg0,
    );
  }

  late final _localtimePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>>(
      'localtime');
  late final _localtime = _localtimePtr
      .asFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>(isLeaf: true);

  int mktime(
    ffi.Pointer<tm> arg0,
  ) {
    return _mktime(
      arg0,
    );
  }

  late final _mktimePtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>('mktime');
  late final _mktime =
      _mktimePtr.asFunction<int Function(ffi.Pointer<tm>)>(isLeaf: true);

  int strftime(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<tm> arg3,
  ) {
    return _strftime(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _strftimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>, ffi.Pointer<tm>)>>('strftime');
  late final _strftime = _strftimePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<tm>)>(isLeaf: true);

  ffi.Pointer<ffi.Char> strptime(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<tm> arg2,
  ) {
    return _strptime(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _strptimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<tm>)>>('strptime');
  late final _strptime = _strptimePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<tm>)>(isLeaf: true);

  int time(
    ffi.Pointer<time_t> arg0,
  ) {
    return _time(
      arg0,
    );
  }

  late final _timePtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<time_t>)>>('time');
  late final _time =
      _timePtr.asFunction<int Function(ffi.Pointer<time_t>)>(isLeaf: true);

  void tzset() {
    return _tzset();
  }

  late final _tzsetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('tzset');
  late final _tzset = _tzsetPtr.asFunction<void Function()>(isLeaf: true);

  ffi.Pointer<ffi.Char> asctime_r(
    ffi.Pointer<tm> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _asctime_r(
      arg0,
      arg1,
    );
  }

  late final _asctime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<tm>, ffi.Pointer<ffi.Char>)>>('asctime_r');
  late final _asctime_r = _asctime_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<tm>, ffi.Pointer<ffi.Char>)>(isLeaf: true);

  ffi.Pointer<ffi.Char> ctime_r(
    ffi.Pointer<time_t> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _ctime_r(
      arg0,
      arg1,
    );
  }

  late final _ctime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<time_t>, ffi.Pointer<ffi.Char>)>>('ctime_r');
  late final _ctime_r = _ctime_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<time_t>, ffi.Pointer<ffi.Char>)>(isLeaf: true);

  ffi.Pointer<tm> gmtime_r(
    ffi.Pointer<time_t> arg0,
    ffi.Pointer<tm> arg1,
  ) {
    return _gmtime_r(
      arg0,
      arg1,
    );
  }

  late final _gmtime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<tm> Function(
              ffi.Pointer<time_t>, ffi.Pointer<tm>)>>('gmtime_r');
  late final _gmtime_r = _gmtime_rPtr.asFunction<
      ffi.Pointer<tm> Function(
          ffi.Pointer<time_t>, ffi.Pointer<tm>)>(isLeaf: true);

  ffi.Pointer<tm> localtime_r(
    ffi.Pointer<time_t> arg0,
    ffi.Pointer<tm> arg1,
  ) {
    return _localtime_r(
      arg0,
      arg1,
    );
  }

  late final _localtime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<tm> Function(
              ffi.Pointer<time_t>, ffi.Pointer<tm>)>>('localtime_r');
  late final _localtime_r = _localtime_rPtr.asFunction<
      ffi.Pointer<tm> Function(
          ffi.Pointer<time_t>, ffi.Pointer<tm>)>(isLeaf: true);

  int posix2time(
    int arg0,
  ) {
    return _posix2time(
      arg0,
    );
  }

  late final _posix2timePtr =
      _lookup<ffi.NativeFunction<time_t Function(time_t)>>('posix2time');
  late final _posix2time =
      _posix2timePtr.asFunction<int Function(int)>(isLeaf: true);

  ffi.Pointer<ffi.Char> timezone(
    int arg0,
    int arg1,
  ) {
    return _timezone(
      arg0,
      arg1,
    );
  }

  late final _timezonePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int, ffi.Int)>>(
      'timezone');
  late final _timezone = _timezonePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, int)>(isLeaf: true);

  void tzsetwall() {
    return _tzsetwall();
  }

  late final _tzsetwallPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('tzsetwall');
  late final _tzsetwall =
      _tzsetwallPtr.asFunction<void Function()>(isLeaf: true);

  int time2posix(
    int arg0,
  ) {
    return _time2posix(
      arg0,
    );
  }

  late final _time2posixPtr =
      _lookup<ffi.NativeFunction<time_t Function(time_t)>>('time2posix');
  late final _time2posix =
      _time2posixPtr.asFunction<int Function(int)>(isLeaf: true);

  int timelocal(
    ffi.Pointer<tm> arg0,
  ) {
    return _timelocal(
      arg0,
    );
  }

  late final _timelocalPtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>(
          'timelocal');
  late final _timelocal =
      _timelocalPtr.asFunction<int Function(ffi.Pointer<tm>)>(isLeaf: true);

  int timegm(
    ffi.Pointer<tm> arg0,
  ) {
    return _timegm(
      arg0,
    );
  }

  late final _timegmPtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>('timegm');
  late final _timegm =
      _timegmPtr.asFunction<int Function(ffi.Pointer<tm>)>(isLeaf: true);

  int nanosleep(
    ffi.Pointer<timespec> __rqtp,
    ffi.Pointer<timespec> __rmtp,
  ) {
    return _nanosleep(
      __rqtp,
      __rmtp,
    );
  }

  late final _nanosleepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<timespec>, ffi.Pointer<timespec>)>>('nanosleep');
  late final _nanosleep = _nanosleepPtr
      .asFunction<int Function(ffi.Pointer<timespec>, ffi.Pointer<timespec>)>(
          isLeaf: true);

  int clock_getres(
    int __clock_id,
    ffi.Pointer<timespec> __res,
  ) {
    return _clock_getres(
      __clock_id,
      __res,
    );
  }

  late final _clock_getresPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Int32, ffi.Pointer<timespec>)>>(
      'clock_getres');
  late final _clock_getres = _clock_getresPtr
      .asFunction<int Function(int, ffi.Pointer<timespec>)>(isLeaf: true);

  int clock_gettime(
    int __clock_id,
    ffi.Pointer<timespec> __tp,
  ) {
    return _clock_gettime(
      __clock_id,
      __tp,
    );
  }

  late final _clock_gettimePtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Int32, ffi.Pointer<timespec>)>>(
      'clock_gettime');
  late final _clock_gettime = _clock_gettimePtr
      .asFunction<int Function(int, ffi.Pointer<timespec>)>(isLeaf: true);

  int clock_gettime_nsec_np(
    int __clock_id,
  ) {
    return _clock_gettime_nsec_np(
      __clock_id,
    );
  }

  late final _clock_gettime_nsec_npPtr =
      _lookup<ffi.NativeFunction<__uint64_t Function(ffi.Int32)>>(
          'clock_gettime_nsec_np');
  late final _clock_gettime_nsec_np =
      _clock_gettime_nsec_npPtr.asFunction<int Function(int)>(isLeaf: true);

  int clock_settime(
    int __clock_id,
    ffi.Pointer<timespec> __tp,
  ) {
    return _clock_settime(
      __clock_id,
      __tp,
    );
  }

  late final _clock_settimePtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Int32, ffi.Pointer<timespec>)>>(
      'clock_settime');
  late final _clock_settime = _clock_settimePtr
      .asFunction<int Function(int, ffi.Pointer<timespec>)>(isLeaf: true);

  int timespec_get(
    ffi.Pointer<timespec> ts,
    int base,
  ) {
    return _timespec_get(
      ts,
      base,
    );
  }

  late final _timespec_getPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<timespec>, ffi.Int)>>(
      'timespec_get');
  late final _timespec_get = _timespec_getPtr
      .asFunction<int Function(ffi.Pointer<timespec>, int)>(isLeaf: true);

  late final ffi.Pointer<_RuneLocale> __DefaultRuneLocale =
      _lookup<_RuneLocale>('_DefaultRuneLocale');

  _RuneLocale get _DefaultRuneLocale => __DefaultRuneLocale.ref;

  late final ffi.Pointer<ffi.Pointer<_RuneLocale>> __CurrentRuneLocale =
      _lookup<ffi.Pointer<_RuneLocale>>('_CurrentRuneLocale');

  ffi.Pointer<_RuneLocale> get _CurrentRuneLocale => __CurrentRuneLocale.value;

  set _CurrentRuneLocale(ffi.Pointer<_RuneLocale> value) =>
      __CurrentRuneLocale.value = value;

  int ___runetype(
    int arg0,
  ) {
    return ____runetype(
      arg0,
    );
  }

  late final ____runetypePtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedLong Function(__darwin_ct_rune_t)>>(
      '___runetype');
  late final ____runetype =
      ____runetypePtr.asFunction<int Function(int)>(isLeaf: true);

  int ___tolower(
    int arg0,
  ) {
    return ____tolower(
      arg0,
    );
  }

  late final ____tolowerPtr = _lookup<
          ffi.NativeFunction<__darwin_ct_rune_t Function(__darwin_ct_rune_t)>>(
      '___tolower');
  late final ____tolower =
      ____tolowerPtr.asFunction<int Function(int)>(isLeaf: true);

  int ___toupper(
    int arg0,
  ) {
    return ____toupper(
      arg0,
    );
  }

  late final ____toupperPtr = _lookup<
          ffi.NativeFunction<__darwin_ct_rune_t Function(__darwin_ct_rune_t)>>(
      '___toupper');
  late final ____toupper =
      ____toupperPtr.asFunction<int Function(int)>(isLeaf: true);

  int __maskrune(
    int arg0,
    int arg1,
  ) {
    return ___maskrune(
      arg0,
      arg1,
    );
  }

  late final ___maskrunePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              __darwin_ct_rune_t, ffi.UnsignedLong)>>('__maskrune');
  late final ___maskrune =
      ___maskrunePtr.asFunction<int Function(int, int)>(isLeaf: true);

  int __toupper(
    int arg0,
  ) {
    return ___toupper1(
      arg0,
    );
  }

  late final ___toupperPtr = _lookup<
          ffi.NativeFunction<__darwin_ct_rune_t Function(__darwin_ct_rune_t)>>(
      '__toupper');
  late final ___toupper1 =
      ___toupperPtr.asFunction<int Function(int)>(isLeaf: true);

  int __tolower(
    int arg0,
  ) {
    return ___tolower1(
      arg0,
    );
  }

  late final ___tolowerPtr = _lookup<
          ffi.NativeFunction<__darwin_ct_rune_t Function(__darwin_ct_rune_t)>>(
      '__tolower');
  late final ___tolower1 =
      ___tolowerPtr.asFunction<int Function(int)>(isLeaf: true);

  int wctype(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _wctype(
      arg0,
    );
  }

  late final _wctypePtr =
      _lookup<ffi.NativeFunction<wctype_t Function(ffi.Pointer<ffi.Char>)>>(
          'wctype');
  late final _wctype =
      _wctypePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>(isLeaf: true);

  int btowc(
    int arg0,
  ) {
    return _btowc(
      arg0,
    );
  }

  late final _btowcPtr =
      _lookup<ffi.NativeFunction<wint_t Function(ffi.Int)>>('btowc');
  late final _btowc = _btowcPtr.asFunction<int Function(int)>(isLeaf: true);

  int fgetwc(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fgetwc(
      arg0,
    );
  }

  late final _fgetwcPtr =
      _lookup<ffi.NativeFunction<wint_t Function(ffi.Pointer<FILE>)>>('fgetwc');
  late final _fgetwc =
      _fgetwcPtr.asFunction<int Function(ffi.Pointer<FILE>)>(isLeaf: true);

  ffi.Pointer<ffi.WChar> fgetws(
    ffi.Pointer<ffi.WChar> arg0,
    int arg1,
    ffi.Pointer<FILE> arg2,
  ) {
    return _fgetws(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fgetwsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<ffi.WChar>, ffi.Int, ffi.Pointer<FILE>)>>('fgetws');
  late final _fgetws = _fgetwsPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(
          ffi.Pointer<ffi.WChar>, int, ffi.Pointer<FILE>)>(isLeaf: true);

  int fputwc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _fputwc(
      arg0,
      arg1,
    );
  }

  late final _fputwcPtr = _lookup<
      ffi
      .NativeFunction<wint_t Function(ffi.WChar, ffi.Pointer<FILE>)>>('fputwc');
  late final _fputwc =
      _fputwcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>(isLeaf: true);

  int fputws(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _fputws(
      arg0,
      arg1,
    );
  }

  late final _fputwsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.WChar>, ffi.Pointer<FILE>)>>('fputws');
  late final _fputws = _fputwsPtr
      .asFunction<int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<FILE>)>(
          isLeaf: true);

  int fwide(
    ffi.Pointer<FILE> arg0,
    int arg1,
  ) {
    return _fwide(
      arg0,
      arg1,
    );
  }

  late final _fwidePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>, ffi.Int)>>(
          'fwide');
  late final _fwide =
      _fwidePtr.asFunction<int Function(ffi.Pointer<FILE>, int)>(isLeaf: true);

  int fwprintf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.WChar> arg1,
  ) {
    return _fwprintf(
      arg0,
      arg1,
    );
  }

  late final _fwprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.WChar>)>>('fwprintf');
  late final _fwprintf = _fwprintfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.WChar>)>(
          isLeaf: true);

  int fwscanf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.WChar> arg1,
  ) {
    return _fwscanf(
      arg0,
      arg1,
    );
  }

  late final _fwscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.WChar>)>>('fwscanf');
  late final _fwscanf = _fwscanfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.WChar>)>(
          isLeaf: true);

  int getwc(
    ffi.Pointer<FILE> arg0,
  ) {
    return _getwc(
      arg0,
    );
  }

  late final _getwcPtr =
      _lookup<ffi.NativeFunction<wint_t Function(ffi.Pointer<FILE>)>>('getwc');
  late final _getwc =
      _getwcPtr.asFunction<int Function(ffi.Pointer<FILE>)>(isLeaf: true);

  int getwchar() {
    return _getwchar();
  }

  late final _getwcharPtr =
      _lookup<ffi.NativeFunction<wint_t Function()>>('getwchar');
  late final _getwchar = _getwcharPtr.asFunction<int Function()>(isLeaf: true);

  int mbrlen(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    ffi.Pointer<mbstate_t> arg2,
  ) {
    return _mbrlen(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mbrlenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<mbstate_t>)>>('mbrlen');
  late final _mbrlen = _mbrlenPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<mbstate_t>)>(isLeaf: true);

  int mbrtowc(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    ffi.Pointer<mbstate_t> arg3,
  ) {
    return _mbrtowc(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _mbrtowcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size, ffi.Pointer<mbstate_t>)>>('mbrtowc');
  late final _mbrtowc = _mbrtowcPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<mbstate_t>)>(isLeaf: true);

  int mbsinit(
    ffi.Pointer<mbstate_t> arg0,
  ) {
    return _mbsinit(
      arg0,
    );
  }

  late final _mbsinitPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<mbstate_t>)>>(
          'mbsinit');
  late final _mbsinit = _mbsinitPtr
      .asFunction<int Function(ffi.Pointer<mbstate_t>)>(isLeaf: true);

  int mbsrtowcs(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
    int arg2,
    ffi.Pointer<mbstate_t> arg3,
  ) {
    return _mbsrtowcs(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _mbsrtowcsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Size,
              ffi.Pointer<mbstate_t>)>>('mbsrtowcs');
  late final _mbsrtowcs = _mbsrtowcsPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int, ffi.Pointer<mbstate_t>)>(isLeaf: true);

  int putwc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _putwc(
      arg0,
      arg1,
    );
  }

  late final _putwcPtr = _lookup<
      ffi
      .NativeFunction<wint_t Function(ffi.WChar, ffi.Pointer<FILE>)>>('putwc');
  late final _putwc =
      _putwcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>(isLeaf: true);

  int putwchar(
    int arg0,
  ) {
    return _putwchar(
      arg0,
    );
  }

  late final _putwcharPtr =
      _lookup<ffi.NativeFunction<wint_t Function(ffi.WChar)>>('putwchar');
  late final _putwchar =
      _putwcharPtr.asFunction<int Function(int)>(isLeaf: true);

  int swprintf(
    ffi.Pointer<ffi.WChar> arg0,
    int arg1,
    ffi.Pointer<ffi.WChar> arg2,
  ) {
    return _swprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _swprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Size,
              ffi.Pointer<ffi.WChar>)>>('swprintf');
  late final _swprintf = _swprintfPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, int, ffi.Pointer<ffi.WChar>)>(isLeaf: true);

  int swscanf(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.WChar> arg1,
  ) {
    return _swscanf(
      arg0,
      arg1,
    );
  }

  late final _swscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>>('swscanf');
  late final _swscanf = _swscanfPtr
      .asFunction<int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>(
          isLeaf: true);

  int ungetwc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _ungetwc(
      arg0,
      arg1,
    );
  }

  late final _ungetwcPtr =
      _lookup<ffi.NativeFunction<wint_t Function(wint_t, ffi.Pointer<FILE>)>>(
          'ungetwc');
  late final _ungetwc = _ungetwcPtr
      .asFunction<int Function(int, ffi.Pointer<FILE>)>(isLeaf: true);

  int vfwprintf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.WChar> arg1,
    __darwin_va_list arg2,
  ) {
    return _vfwprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vfwprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.WChar>,
              __darwin_va_list)>>('vfwprintf');
  late final _vfwprintf = _vfwprintfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.WChar>,
          __darwin_va_list)>(isLeaf: true);

  int vswprintf(
    ffi.Pointer<ffi.WChar> arg0,
    int arg1,
    ffi.Pointer<ffi.WChar> arg2,
    __darwin_va_list arg3,
  ) {
    return _vswprintf(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _vswprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Size,
              ffi.Pointer<ffi.WChar>, __darwin_va_list)>>('vswprintf');
  late final _vswprintf = _vswprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, int, ffi.Pointer<ffi.WChar>,
          __darwin_va_list)>(isLeaf: true);

  int vwprintf(
    ffi.Pointer<ffi.WChar> arg0,
    __darwin_va_list arg1,
  ) {
    return _vwprintf(
      arg0,
      arg1,
    );
  }

  late final _vwprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.WChar>, __darwin_va_list)>>('vwprintf');
  late final _vwprintf = _vwprintfPtr
      .asFunction<int Function(ffi.Pointer<ffi.WChar>, __darwin_va_list)>(
          isLeaf: true);

  int wcrtomb(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    ffi.Pointer<mbstate_t> arg2,
  ) {
    return _wcrtomb(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wcrtombPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.WChar,
              ffi.Pointer<mbstate_t>)>>('wcrtomb');
  late final _wcrtomb = _wcrtombPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<mbstate_t>)>(isLeaf: true);

  ffi.Pointer<ffi.WChar> wcscat(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.WChar> arg1,
  ) {
    return _wcscat(
      arg0,
      arg1,
    );
  }

  late final _wcscatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>>('wcscat');
  late final _wcscat = _wcscatPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>(isLeaf: true);

  ffi.Pointer<ffi.Int> wcschr(
    ffi.Pointer<ffi.WChar> arg0,
    int arg1,
  ) {
    return _wcschr(
      arg0,
      arg1,
    );
  }

  late final _wcschrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int> Function(
              ffi.Pointer<ffi.WChar>, ffi.WChar)>>('wcschr');
  late final _wcschr = _wcschrPtr
      .asFunction<ffi.Pointer<ffi.Int> Function(ffi.Pointer<ffi.WChar>, int)>(
          isLeaf: true);

  int wcscmp(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.WChar> arg1,
  ) {
    return _wcscmp(
      arg0,
      arg1,
    );
  }

  late final _wcscmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>>('wcscmp');
  late final _wcscmp = _wcscmpPtr
      .asFunction<int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>(
          isLeaf: true);

  int wcscoll(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.WChar> arg1,
  ) {
    return _wcscoll(
      arg0,
      arg1,
    );
  }

  late final _wcscollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>>('wcscoll');
  late final _wcscoll = _wcscollPtr
      .asFunction<int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>(
          isLeaf: true);

  ffi.Pointer<ffi.WChar> wcscpy(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.WChar> arg1,
  ) {
    return _wcscpy(
      arg0,
      arg1,
    );
  }

  late final _wcscpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>>('wcscpy');
  late final _wcscpy = _wcscpyPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>(isLeaf: true);

  int wcscspn(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.WChar> arg1,
  ) {
    return _wcscspn(
      arg0,
      arg1,
    );
  }

  late final _wcscspnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>>('wcscspn');
  late final _wcscspn = _wcscspnPtr
      .asFunction<int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>(
          isLeaf: true);

  int wcsftime(
    ffi.Pointer<ffi.WChar> arg0,
    int arg1,
    ffi.Pointer<ffi.WChar> arg2,
    ffi.Pointer<tm> arg3,
  ) {
    return _wcsftime(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _wcsftimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.WChar>, ffi.Size,
              ffi.Pointer<ffi.WChar>, ffi.Pointer<tm>)>>('wcsftime');
  late final _wcsftime = _wcsftimePtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, int, ffi.Pointer<ffi.WChar>,
          ffi.Pointer<tm>)>(isLeaf: true);

  int wcslen(
    ffi.Pointer<ffi.WChar> arg0,
  ) {
    return _wcslen(
      arg0,
    );
  }

  late final _wcslenPtr = _lookup<
          ffi
          .NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.WChar>)>>(
      'wcslen');
  late final _wcslen =
      _wcslenPtr.asFunction<int Function(ffi.Pointer<ffi.WChar>)>(isLeaf: true);

  ffi.Pointer<ffi.WChar> wcsncat(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.WChar> arg1,
    int arg2,
  ) {
    return _wcsncat(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wcsncatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>, ffi.Size)>>('wcsncat');
  late final _wcsncat = _wcsncatPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>, int)>(isLeaf: true);

  int wcsncmp(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.WChar> arg1,
    int arg2,
  ) {
    return _wcsncmp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wcsncmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
              ffi.Size)>>('wcsncmp');
  late final _wcsncmp = _wcsncmpPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>, int)>(isLeaf: true);

  ffi.Pointer<ffi.WChar> wcsncpy(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.WChar> arg1,
    int arg2,
  ) {
    return _wcsncpy(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wcsncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>, ffi.Size)>>('wcsncpy');
  late final _wcsncpy = _wcsncpyPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>, int)>(isLeaf: true);

  ffi.Pointer<ffi.WChar> wcspbrk(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.WChar> arg1,
  ) {
    return _wcspbrk(
      arg0,
      arg1,
    );
  }

  late final _wcspbrkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>>('wcspbrk');
  late final _wcspbrk = _wcspbrkPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>(isLeaf: true);

  ffi.Pointer<ffi.WChar> wcsrchr(
    ffi.Pointer<ffi.WChar> arg0,
    int arg1,
  ) {
    return _wcsrchr(
      arg0,
      arg1,
    );
  }

  late final _wcsrchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<ffi.WChar>, ffi.WChar)>>('wcsrchr');
  late final _wcsrchr = _wcsrchrPtr
      .asFunction<ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>, int)>(
          isLeaf: true);

  int wcsrtombs(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> arg1,
    int arg2,
    ffi.Pointer<mbstate_t> arg3,
  ) {
    return _wcsrtombs(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _wcsrtombsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>,
              ffi.Size,
              ffi.Pointer<mbstate_t>)>>('wcsrtombs');
  late final _wcsrtombs = _wcsrtombsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.WChar>>,
          int, ffi.Pointer<mbstate_t>)>(isLeaf: true);

  int wcsspn(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.WChar> arg1,
  ) {
    return _wcsspn(
      arg0,
      arg1,
    );
  }

  late final _wcsspnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>>('wcsspn');
  late final _wcsspn = _wcsspnPtr
      .asFunction<int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>(
          isLeaf: true);

  ffi.Pointer<ffi.WChar> wcsstr(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.WChar> arg1,
  ) {
    return _wcsstr(
      arg0,
      arg1,
    );
  }

  late final _wcsstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>>('wcsstr');
  late final _wcsstr = _wcsstrPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>(isLeaf: true);

  int wcsxfrm(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.WChar> arg1,
    int arg2,
  ) {
    return _wcsxfrm(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wcsxfrmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
              ffi.Size)>>('wcsxfrm');
  late final _wcsxfrm = _wcsxfrmPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>, int)>(isLeaf: true);

  int wctob(
    int arg0,
  ) {
    return _wctob(
      arg0,
    );
  }

  late final _wctobPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(wint_t)>>('wctob');
  late final _wctob = _wctobPtr.asFunction<int Function(int)>(isLeaf: true);

  double wcstod(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> arg1,
  ) {
    return _wcstod(
      arg0,
      arg1,
    );
  }

  late final _wcstodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>)>>('wcstod');
  late final _wcstod = _wcstodPtr.asFunction<
      double Function(ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.Pointer<ffi.WChar>>)>(isLeaf: true);

  ffi.Pointer<ffi.WChar> wcstok(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.WChar> arg1,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> arg2,
  ) {
    return _wcstok(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wcstokPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>)>>('wcstok');
  late final _wcstok = _wcstokPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(
          ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.Pointer<ffi.WChar>>)>(isLeaf: true);

  int wcstol(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> arg1,
    int arg2,
  ) {
    return _wcstol(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wcstolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>, ffi.Int)>>('wcstol');
  late final _wcstol = _wcstolPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>,
          int)>(isLeaf: true);

  int wcstoul(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> arg1,
    int arg2,
  ) {
    return _wcstoul(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wcstoulPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>, ffi.Int)>>('wcstoul');
  late final _wcstoul = _wcstoulPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>,
          int)>(isLeaf: true);

  ffi.Pointer<ffi.Int> wmemchr(
    ffi.Pointer<ffi.WChar> arg0,
    int arg1,
    int arg2,
  ) {
    return _wmemchr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wmemchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int> Function(
              ffi.Pointer<ffi.WChar>, ffi.WChar, ffi.Size)>>('wmemchr');
  late final _wmemchr = _wmemchrPtr.asFunction<
      ffi.Pointer<ffi.Int> Function(
          ffi.Pointer<ffi.WChar>, int, int)>(isLeaf: true);

  int wmemcmp(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.WChar> arg1,
    int arg2,
  ) {
    return _wmemcmp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wmemcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
              ffi.Size)>>('wmemcmp');
  late final _wmemcmp = _wmemcmpPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>, int)>(isLeaf: true);

  ffi.Pointer<ffi.Int> wmemcpy(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.WChar> arg1,
    int arg2,
  ) {
    return _wmemcpy(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wmemcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int> Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>, ffi.Size)>>('wmemcpy');
  late final _wmemcpy = _wmemcpyPtr.asFunction<
      ffi.Pointer<ffi.Int> Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>, int)>(isLeaf: true);

  ffi.Pointer<ffi.Int> wmemmove(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.WChar> arg1,
    int arg2,
  ) {
    return _wmemmove(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wmemmovePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int> Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>, ffi.Size)>>('wmemmove');
  late final _wmemmove = _wmemmovePtr.asFunction<
      ffi.Pointer<ffi.Int> Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>, int)>(isLeaf: true);

  ffi.Pointer<ffi.WChar> wmemset(
    ffi.Pointer<ffi.WChar> arg0,
    int arg1,
    int arg2,
  ) {
    return _wmemset(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wmemsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<ffi.WChar>, ffi.WChar, ffi.Size)>>('wmemset');
  late final _wmemset = _wmemsetPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(
          ffi.Pointer<ffi.WChar>, int, int)>(isLeaf: true);

  int wprintf(
    ffi.Pointer<ffi.WChar> arg0,
  ) {
    return _wprintf(
      arg0,
    );
  }

  late final _wprintfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.WChar>)>>(
          'wprintf');
  late final _wprintf = _wprintfPtr
      .asFunction<int Function(ffi.Pointer<ffi.WChar>)>(isLeaf: true);

  int wscanf(
    ffi.Pointer<ffi.WChar> arg0,
  ) {
    return _wscanf(
      arg0,
    );
  }

  late final _wscanfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.WChar>)>>(
          'wscanf');
  late final _wscanf =
      _wscanfPtr.asFunction<int Function(ffi.Pointer<ffi.WChar>)>(isLeaf: true);

  int wcswidth(
    ffi.Pointer<ffi.WChar> arg0,
    int arg1,
  ) {
    return _wcswidth(
      arg0,
      arg1,
    );
  }

  late final _wcswidthPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Size)>>(
      'wcswidth');
  late final _wcswidth = _wcswidthPtr
      .asFunction<int Function(ffi.Pointer<ffi.WChar>, int)>(isLeaf: true);

  int wcwidth(
    int arg0,
  ) {
    return _wcwidth(
      arg0,
    );
  }

  late final _wcwidthPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.WChar)>>('wcwidth');
  late final _wcwidth = _wcwidthPtr.asFunction<int Function(int)>(isLeaf: true);

  int vfwscanf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.WChar> arg1,
    __darwin_va_list arg2,
  ) {
    return _vfwscanf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vfwscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.WChar>,
              __darwin_va_list)>>('vfwscanf');
  late final _vfwscanf = _vfwscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.WChar>,
          __darwin_va_list)>(isLeaf: true);

  int vswscanf(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.WChar> arg1,
    __darwin_va_list arg2,
  ) {
    return _vswscanf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vswscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
              __darwin_va_list)>>('vswscanf');
  late final _vswscanf = _vswscanfPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
          __darwin_va_list)>(isLeaf: true);

  int vwscanf(
    ffi.Pointer<ffi.WChar> arg0,
    __darwin_va_list arg1,
  ) {
    return _vwscanf(
      arg0,
      arg1,
    );
  }

  late final _vwscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.WChar>, __darwin_va_list)>>('vwscanf');
  late final _vwscanf = _vwscanfPtr
      .asFunction<int Function(ffi.Pointer<ffi.WChar>, __darwin_va_list)>(
          isLeaf: true);

  double wcstof(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> arg1,
  ) {
    return _wcstof(
      arg0,
      arg1,
    );
  }

  late final _wcstofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>)>>('wcstof');
  late final _wcstof = _wcstofPtr.asFunction<
      double Function(ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.Pointer<ffi.WChar>>)>(isLeaf: true);

  int wcstoll(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> arg1,
    int arg2,
  ) {
    return _wcstoll(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wcstollPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>, ffi.Int)>>('wcstoll');
  late final _wcstoll = _wcstollPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>,
          int)>(isLeaf: true);

  int wcstoull(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> arg1,
    int arg2,
  ) {
    return _wcstoull(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wcstoullPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>, ffi.Int)>>('wcstoull');
  late final _wcstoull = _wcstoullPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>,
          int)>(isLeaf: true);

  int mbsnrtowcs(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
    int arg2,
    int arg3,
    ffi.Pointer<mbstate_t> arg4,
  ) {
    return _mbsnrtowcs(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _mbsnrtowcsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<mbstate_t>)>>('mbsnrtowcs');
  late final _mbsnrtowcs = _mbsnrtowcsPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int, int, ffi.Pointer<mbstate_t>)>(isLeaf: true);

  ffi.Pointer<ffi.WChar> wcpcpy(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.WChar> arg1,
  ) {
    return _wcpcpy(
      arg0,
      arg1,
    );
  }

  late final _wcpcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>>('wcpcpy');
  late final _wcpcpy = _wcpcpyPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>(isLeaf: true);

  ffi.Pointer<ffi.WChar> wcpncpy(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.WChar> arg1,
    int arg2,
  ) {
    return _wcpncpy(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wcpncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>, ffi.Size)>>('wcpncpy');
  late final _wcpncpy = _wcpncpyPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>, int)>(isLeaf: true);

  ffi.Pointer<ffi.WChar> wcsdup(
    ffi.Pointer<ffi.WChar> arg0,
  ) {
    return _wcsdup(
      arg0,
    );
  }

  late final _wcsdupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>)>>('wcsdup');
  late final _wcsdup = _wcsdupPtr
      .asFunction<ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>)>(
          isLeaf: true);

  int wcscasecmp(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.WChar> arg1,
  ) {
    return _wcscasecmp(
      arg0,
      arg1,
    );
  }

  late final _wcscasecmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>>('wcscasecmp');
  late final _wcscasecmp = _wcscasecmpPtr
      .asFunction<int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>(
          isLeaf: true);

  int wcsncasecmp(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.WChar> arg1,
    int n,
  ) {
    return _wcsncasecmp(
      arg0,
      arg1,
      n,
    );
  }

  late final _wcsncasecmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
              ffi.Size)>>('wcsncasecmp');
  late final _wcsncasecmp = _wcsncasecmpPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>, int)>(isLeaf: true);

  int wcsnlen(
    ffi.Pointer<ffi.WChar> arg0,
    int arg1,
  ) {
    return _wcsnlen(
      arg0,
      arg1,
    );
  }

  late final _wcsnlenPtr = _lookup<
          ffi
          .NativeFunction<ffi.Size Function(ffi.Pointer<ffi.WChar>, ffi.Size)>>(
      'wcsnlen');
  late final _wcsnlen = _wcsnlenPtr
      .asFunction<int Function(ffi.Pointer<ffi.WChar>, int)>(isLeaf: true);

  int wcsnrtombs(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> arg1,
    int arg2,
    int arg3,
    ffi.Pointer<mbstate_t> arg4,
  ) {
    return _wcsnrtombs(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _wcsnrtombsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<mbstate_t>)>>('wcsnrtombs');
  late final _wcsnrtombs = _wcsnrtombsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.WChar>>,
          int, int, ffi.Pointer<mbstate_t>)>(isLeaf: true);

  ffi.Pointer<FILE> open_wmemstream(
    ffi.Pointer<ffi.Pointer<ffi.WChar>> __bufp,
    ffi.Pointer<ffi.Size> __sizep,
  ) {
    return _open_wmemstream(
      __bufp,
      __sizep,
    );
  }

  late final _open_wmemstreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.WChar>>,
              ffi.Pointer<ffi.Size>)>>('open_wmemstream');
  late final _open_wmemstream = _open_wmemstreamPtr.asFunction<
      ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.WChar>>,
          ffi.Pointer<ffi.Size>)>(isLeaf: true);

  ffi.Pointer<ffi.WChar> fgetwln(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Size> arg1,
  ) {
    return _fgetwln(
      arg0,
      arg1,
    );
  }

  late final _fgetwlnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Size>)>>('fgetwln');
  late final _fgetwln = _fgetwlnPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(
          ffi.Pointer<FILE>, ffi.Pointer<ffi.Size>)>(isLeaf: true);

  int wcslcat(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.WChar> arg1,
    int arg2,
  ) {
    return _wcslcat(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wcslcatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
              ffi.Size)>>('wcslcat');
  late final _wcslcat = _wcslcatPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>, int)>(isLeaf: true);

  int wcslcpy(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.WChar> arg1,
    int arg2,
  ) {
    return _wcslcpy(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wcslcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
              ffi.Size)>>('wcslcpy');
  late final _wcslcpy = _wcslcpyPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>, int)>(isLeaf: true);

  void mab_device_info_init(
    ffi.Pointer<mab_device_info> pInfo,
    mab_device_id id,
    ffi.Pointer<ffi.Char> name,
    int isDefault,
  ) {
    return _mab_device_info_init(
      pInfo,
      id,
      name,
      isDefault,
    );
  }

  late final _mab_device_info_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<mab_device_info>, mab_device_id,
              ffi.Pointer<ffi.Char>, mab_bool)>>('mab_device_info_init');
  late final _mab_device_info_init = _mab_device_info_initPtr.asFunction<
      void Function(ffi.Pointer<mab_device_info>, mab_device_id,
          ffi.Pointer<ffi.Char>, int)>(isLeaf: true);

  int mab_device_context_init(
    ffi.Pointer<mab_device_context> pContext,
    ffi.Pointer<ffi.Int32> pBackends,
    int backendCount,
  ) {
    return _mab_device_context_init(
      pContext,
      pBackends,
      backendCount,
    );
  }

  late final _mab_device_context_initPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(ffi.Pointer<mab_device_context>,
              ffi.Pointer<ffi.Int32>, ffi.Int)>>('mab_device_context_init');
  late final _mab_device_context_init = _mab_device_context_initPtr.asFunction<
      int Function(ffi.Pointer<mab_device_context>, ffi.Pointer<ffi.Int32>,
          int)>(isLeaf: true);

  int mab_device_context_get_device_count(
    ffi.Pointer<mab_device_context> pContext,
    int type,
    ffi.Pointer<ffi.Int> pCount,
  ) {
    return _mab_device_context_get_device_count(
      pContext,
      type,
      pCount,
    );
  }

  late final _mab_device_context_get_device_countPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(ffi.Pointer<mab_device_context>, ffi.Int32,
              ffi.Pointer<ffi.Int>)>>('mab_device_context_get_device_count');
  late final _mab_device_context_get_device_count =
      _mab_device_context_get_device_countPtr.asFunction<
          int Function(ffi.Pointer<mab_device_context>, int,
              ffi.Pointer<ffi.Int>)>(isLeaf: true);

  int mab_device_context_get_device_info(
    ffi.Pointer<mab_device_context> pContext,
    int type,
    int index,
    ffi.Pointer<mab_device_info> pInfo,
  ) {
    return _mab_device_context_get_device_info(
      pContext,
      type,
      index,
      pInfo,
    );
  }

  late final _mab_device_context_get_device_infoPtr = _lookup<
          ffi.NativeFunction<
              mab_result Function(ffi.Pointer<mab_device_context>, ffi.Int32,
                  ffi.Int, ffi.Pointer<mab_device_info>)>>(
      'mab_device_context_get_device_info');
  late final _mab_device_context_get_device_info =
      _mab_device_context_get_device_infoPtr.asFunction<
          int Function(ffi.Pointer<mab_device_context>, int, int,
              ffi.Pointer<mab_device_info>)>(isLeaf: true);

  int mab_device_context_uninit(
    ffi.Pointer<mab_device_context> pContext,
  ) {
    return _mab_device_context_uninit(
      pContext,
    );
  }

  late final _mab_device_context_uninitPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(
              ffi.Pointer<mab_device_context>)>>('mab_device_context_uninit');
  late final _mab_device_context_uninit = _mab_device_context_uninitPtr
      .asFunction<int Function(ffi.Pointer<mab_device_context>)>(isLeaf: true);

  mab_device_config mab_device_config_init(
    int type,
    int format,
    int sampleRate,
    int channels,
    int bufferFrameSize,
    int notificationPortId,
  ) {
    return _mab_device_config_init(
      type,
      format,
      sampleRate,
      channels,
      bufferFrameSize,
      notificationPortId,
    );
  }

  late final _mab_device_config_initPtr = _lookup<
      ffi.NativeFunction<
          mab_device_config Function(ffi.Int32, ffi.Int32, ffi.Int, ffi.Int,
              ffi.Int, ffi.Int64)>>('mab_device_config_init');
  late final _mab_device_config_init = _mab_device_config_initPtr
      .asFunction<mab_device_config Function(int, int, int, int, int, int)>(
          isLeaf: true);

  int mab_device_init(
    ffi.Pointer<mab_device> pDevice,
    mab_device_config config,
    ffi.Pointer<mab_device_context> pContext,
    ffi.Pointer<mab_device_id> pDeviceId,
  ) {
    return _mab_device_init(
      pDevice,
      config,
      pContext,
      pDeviceId,
    );
  }

  late final _mab_device_initPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(
              ffi.Pointer<mab_device>,
              mab_device_config,
              ffi.Pointer<mab_device_context>,
              ffi.Pointer<mab_device_id>)>>('mab_device_init');
  late final _mab_device_init = _mab_device_initPtr.asFunction<
      int Function(ffi.Pointer<mab_device>, mab_device_config,
          ffi.Pointer<mab_device_context>, ffi.Pointer<mab_device_id>)>();

  int mab_device_capture_read(
    ffi.Pointer<mab_device> pDevice,
    ffi.Pointer<ffi.Float> pBuffer,
    int frameCount,
    ffi.Pointer<ffi.Int> pFramesRead,
  ) {
    return _mab_device_capture_read(
      pDevice,
      pBuffer,
      frameCount,
      pFramesRead,
    );
  }

  late final _mab_device_capture_readPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(ffi.Pointer<mab_device>, ffi.Pointer<ffi.Float>,
              ffi.Int, ffi.Pointer<ffi.Int>)>>('mab_device_capture_read');
  late final _mab_device_capture_read = _mab_device_capture_readPtr.asFunction<
      int Function(ffi.Pointer<mab_device>, ffi.Pointer<ffi.Float>, int,
          ffi.Pointer<ffi.Int>)>(isLeaf: true);

  int mab_device_playback_write(
    ffi.Pointer<mab_device> pDevice,
    ffi.Pointer<ffi.Float> pBuffer,
    int frameCount,
    ffi.Pointer<ffi.Int> pFramesWrite,
  ) {
    return _mab_device_playback_write(
      pDevice,
      pBuffer,
      frameCount,
      pFramesWrite,
    );
  }

  late final _mab_device_playback_writePtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(ffi.Pointer<mab_device>, ffi.Pointer<ffi.Float>,
              ffi.Int, ffi.Pointer<ffi.Int>)>>('mab_device_playback_write');
  late final _mab_device_playback_write =
      _mab_device_playback_writePtr.asFunction<
          int Function(ffi.Pointer<mab_device>, ffi.Pointer<ffi.Float>, int,
              ffi.Pointer<ffi.Int>)>(isLeaf: true);

  int mab_device_get_device_info(
    ffi.Pointer<mab_device> pDevice,
    ffi.Pointer<mab_device_info> pDeviceInfo,
  ) {
    return _mab_device_get_device_info(
      pDevice,
      pDeviceInfo,
    );
  }

  late final _mab_device_get_device_infoPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(ffi.Pointer<mab_device>,
              ffi.Pointer<mab_device_info>)>>('mab_device_get_device_info');
  late final _mab_device_get_device_info =
      _mab_device_get_device_infoPtr.asFunction<
          int Function(ffi.Pointer<mab_device>,
              ffi.Pointer<mab_device_info>)>(isLeaf: true);

  int mab_device_start(
    ffi.Pointer<mab_device> pDevice,
  ) {
    return _mab_device_start(
      pDevice,
    );
  }

  late final _mab_device_startPtr =
      _lookup<ffi.NativeFunction<mab_result Function(ffi.Pointer<mab_device>)>>(
          'mab_device_start');
  late final _mab_device_start = _mab_device_startPtr
      .asFunction<int Function(ffi.Pointer<mab_device>)>(isLeaf: true);

  int mab_device_stop(
    ffi.Pointer<mab_device> pDevice,
  ) {
    return _mab_device_stop(
      pDevice,
    );
  }

  late final _mab_device_stopPtr =
      _lookup<ffi.NativeFunction<mab_result Function(ffi.Pointer<mab_device>)>>(
          'mab_device_stop');
  late final _mab_device_stop = _mab_device_stopPtr
      .asFunction<int Function(ffi.Pointer<mab_device>)>(isLeaf: true);

  int mab_device_get_state(
    ffi.Pointer<mab_device> pDevice,
  ) {
    return _mab_device_get_state(
      pDevice,
    );
  }

  late final _mab_device_get_statePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<mab_device>)>>(
          'mab_device_get_state');
  late final _mab_device_get_state = _mab_device_get_statePtr
      .asFunction<int Function(ffi.Pointer<mab_device>)>(isLeaf: true);

  void mab_device_clear_buffer(
    ffi.Pointer<mab_device> pDevice,
  ) {
    return _mab_device_clear_buffer(
      pDevice,
    );
  }

  late final _mab_device_clear_bufferPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<mab_device>)>>(
          'mab_device_clear_buffer');
  late final _mab_device_clear_buffer = _mab_device_clear_bufferPtr
      .asFunction<void Function(ffi.Pointer<mab_device>)>(isLeaf: true);

  int mab_device_available_read(
    ffi.Pointer<mab_device> pDevice,
  ) {
    return _mab_device_available_read(
      pDevice,
    );
  }

  late final _mab_device_available_readPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<mab_device>)>>(
          'mab_device_available_read');
  late final _mab_device_available_read = _mab_device_available_readPtr
      .asFunction<int Function(ffi.Pointer<mab_device>)>(isLeaf: true);

  int mab_device_available_write(
    ffi.Pointer<mab_device> pDevice,
  ) {
    return _mab_device_available_write(
      pDevice,
    );
  }

  late final _mab_device_available_writePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<mab_device>)>>(
          'mab_device_available_write');
  late final _mab_device_available_write = _mab_device_available_writePtr
      .asFunction<int Function(ffi.Pointer<mab_device>)>(isLeaf: true);

  void mab_device_uninit(
    ffi.Pointer<mab_device> pDevice,
  ) {
    return _mab_device_uninit(
      pDevice,
    );
  }

  late final _mab_device_uninitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<mab_device>)>>(
          'mab_device_uninit');
  late final _mab_device_uninit = _mab_device_uninitPtr
      .asFunction<void Function(ffi.Pointer<mab_device>)>(isLeaf: true);

  mab_audio_converter_config mab_audio_converter_config_init(
    int formatIn,
    int formatOut,
    int sampleRateIn,
    int sampleRateOut,
    int channelsIn,
    int channelsOut,
  ) {
    return _mab_audio_converter_config_init(
      formatIn,
      formatOut,
      sampleRateIn,
      sampleRateOut,
      channelsIn,
      channelsOut,
    );
  }

  late final _mab_audio_converter_config_initPtr = _lookup<
      ffi.NativeFunction<
          mab_audio_converter_config Function(ffi.Int32, ffi.Int32, ffi.Int,
              ffi.Int, ffi.Int, ffi.Int)>>('mab_audio_converter_config_init');
  late final _mab_audio_converter_config_init =
      _mab_audio_converter_config_initPtr.asFunction<
          mab_audio_converter_config Function(
              int, int, int, int, int, int)>(isLeaf: true);

  int mab_audio_converter_init(
    ffi.Pointer<mab_audio_converter> pConverter,
    mab_audio_converter_config config,
  ) {
    return _mab_audio_converter_init(
      pConverter,
      config,
    );
  }

  late final _mab_audio_converter_initPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(ffi.Pointer<mab_audio_converter>,
              mab_audio_converter_config)>>('mab_audio_converter_init');
  late final _mab_audio_converter_init =
      _mab_audio_converter_initPtr.asFunction<
          int Function(ffi.Pointer<mab_audio_converter>,
              mab_audio_converter_config)>(isLeaf: true);

  int mab_audio_converter_process_pcm_frames(
    ffi.Pointer<mab_audio_converter> pConverter,
    ffi.Pointer<ffi.Void> pFramesIn,
    ffi.Pointer<uint64> pFrameCountIn,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<uint64> pFrameCountOut,
  ) {
    return _mab_audio_converter_process_pcm_frames(
      pConverter,
      pFramesIn,
      pFrameCountIn,
      pFramesOut,
      pFrameCountOut,
    );
  }

  late final _mab_audio_converter_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(
              ffi.Pointer<mab_audio_converter>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<uint64>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<uint64>)>>('mab_audio_converter_process_pcm_frames');
  late final _mab_audio_converter_process_pcm_frames =
      _mab_audio_converter_process_pcm_framesPtr.asFunction<
          int Function(
              ffi.Pointer<mab_audio_converter>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<uint64>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<uint64>)>(isLeaf: true);

  int mab_audio_converter_get_input_latency(
    ffi.Pointer<mab_audio_converter> pConverter,
  ) {
    return _mab_audio_converter_get_input_latency(
      pConverter,
    );
  }

  late final _mab_audio_converter_get_input_latencyPtr = _lookup<
          ffi
          .NativeFunction<uint64 Function(ffi.Pointer<mab_audio_converter>)>>(
      'mab_audio_converter_get_input_latency');
  late final _mab_audio_converter_get_input_latency =
      _mab_audio_converter_get_input_latencyPtr
          .asFunction<int Function(ffi.Pointer<mab_audio_converter>)>(
              isLeaf: true);

  int mab_audio_converter_get_output_latency(
    ffi.Pointer<mab_audio_converter> pConverter,
  ) {
    return _mab_audio_converter_get_output_latency(
      pConverter,
    );
  }

  late final _mab_audio_converter_get_output_latencyPtr = _lookup<
          ffi
          .NativeFunction<uint64 Function(ffi.Pointer<mab_audio_converter>)>>(
      'mab_audio_converter_get_output_latency');
  late final _mab_audio_converter_get_output_latency =
      _mab_audio_converter_get_output_latencyPtr
          .asFunction<int Function(ffi.Pointer<mab_audio_converter>)>(
              isLeaf: true);

  int mab_audio_converter_get_required_input_frame_count(
    ffi.Pointer<mab_audio_converter> pConverter,
    int outputFrameCount,
    ffi.Pointer<uint64> pInputFrameCount,
  ) {
    return _mab_audio_converter_get_required_input_frame_count(
      pConverter,
      outputFrameCount,
      pInputFrameCount,
    );
  }

  late final _mab_audio_converter_get_required_input_frame_countPtr = _lookup<
          ffi.NativeFunction<
              mab_result Function(ffi.Pointer<mab_audio_converter>, uint64,
                  ffi.Pointer<uint64>)>>(
      'mab_audio_converter_get_required_input_frame_count');
  late final _mab_audio_converter_get_required_input_frame_count =
      _mab_audio_converter_get_required_input_frame_countPtr.asFunction<
          int Function(ffi.Pointer<mab_audio_converter>, int,
              ffi.Pointer<uint64>)>(isLeaf: true);

  int mab_audio_converter_get_expected_output_frame_count(
    ffi.Pointer<mab_audio_converter> pConverter,
    int inputFrameCount,
    ffi.Pointer<uint64> pOutputFrameCount,
  ) {
    return _mab_audio_converter_get_expected_output_frame_count(
      pConverter,
      inputFrameCount,
      pOutputFrameCount,
    );
  }

  late final _mab_audio_converter_get_expected_output_frame_countPtr = _lookup<
          ffi.NativeFunction<
              mab_result Function(ffi.Pointer<mab_audio_converter>, uint64,
                  ffi.Pointer<uint64>)>>(
      'mab_audio_converter_get_expected_output_frame_count');
  late final _mab_audio_converter_get_expected_output_frame_count =
      _mab_audio_converter_get_expected_output_frame_countPtr.asFunction<
          int Function(ffi.Pointer<mab_audio_converter>, int,
              ffi.Pointer<uint64>)>(isLeaf: true);

  int mab_audio_converter_reset(
    ffi.Pointer<mab_audio_converter> pConverter,
  ) {
    return _mab_audio_converter_reset(
      pConverter,
    );
  }

  late final _mab_audio_converter_resetPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(
              ffi.Pointer<mab_audio_converter>)>>('mab_audio_converter_reset');
  late final _mab_audio_converter_reset = _mab_audio_converter_resetPtr
      .asFunction<int Function(ffi.Pointer<mab_audio_converter>)>(isLeaf: true);

  void mab_audio_converter_uninit(
    ffi.Pointer<mab_audio_converter> pConverter,
  ) {
    return _mab_audio_converter_uninit(
      pConverter,
    );
  }

  late final _mab_audio_converter_uninitPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<mab_audio_converter>)>>(
      'mab_audio_converter_uninit');
  late final _mab_audio_converter_uninit = _mab_audio_converter_uninitPtr
      .asFunction<void Function(ffi.Pointer<mab_audio_converter>)>(
          isLeaf: true);

  mab_audio_decoder_config mab_audio_decoder_config_init(
    int format,
    int sampleRate,
    int channels,
  ) {
    return _mab_audio_decoder_config_init(
      format,
      sampleRate,
      channels,
    );
  }

  late final _mab_audio_decoder_config_initPtr = _lookup<
      ffi.NativeFunction<
          mab_audio_decoder_config Function(
              ffi.Int32, ffi.Int, ffi.Int)>>('mab_audio_decoder_config_init');
  late final _mab_audio_decoder_config_init = _mab_audio_decoder_config_initPtr
      .asFunction<mab_audio_decoder_config Function(int, int, int)>(
          isLeaf: true);

  int mab_audio_decoder_get_info(
    ffi.Pointer<ffi.Char> pFilePath,
    ffi.Pointer<mab_audio_decoder_info> pInfo,
  ) {
    return _mab_audio_decoder_get_info(
      pFilePath,
      pInfo,
    );
  }

  late final _mab_audio_decoder_get_infoPtr = _lookup<
          ffi.NativeFunction<
              mab_result Function(
                  ffi.Pointer<ffi.Char>, ffi.Pointer<mab_audio_decoder_info>)>>(
      'mab_audio_decoder_get_info');
  late final _mab_audio_decoder_get_info =
      _mab_audio_decoder_get_infoPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<mab_audio_decoder_info>)>(isLeaf: true);

  int mab_audio_decoder_init(
    ffi.Pointer<mab_audio_decoder> pDecoder,
    mab_audio_decoder_config config,
    mab_audio_decoder_read_proc onRead,
    mab_audio_decoder_seek_proc onSeek,
    ffi.Pointer<ffi.Void> pUserData,
  ) {
    return _mab_audio_decoder_init(
      pDecoder,
      config,
      onRead,
      onSeek,
      pUserData,
    );
  }

  late final _mab_audio_decoder_initPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(
              ffi.Pointer<mab_audio_decoder>,
              mab_audio_decoder_config,
              mab_audio_decoder_read_proc,
              mab_audio_decoder_seek_proc,
              ffi.Pointer<ffi.Void>)>>('mab_audio_decoder_init');
  late final _mab_audio_decoder_init = _mab_audio_decoder_initPtr.asFunction<
      int Function(
          ffi.Pointer<mab_audio_decoder>,
          mab_audio_decoder_config,
          mab_audio_decoder_read_proc,
          mab_audio_decoder_seek_proc,
          ffi.Pointer<ffi.Void>)>();

  int mab_audio_decoder_init_file(
    ffi.Pointer<mab_audio_decoder> pDecoder,
    ffi.Pointer<ffi.Char> pFilePath,
    mab_audio_decoder_config config,
  ) {
    return _mab_audio_decoder_init_file(
      pDecoder,
      pFilePath,
      config,
    );
  }

  late final _mab_audio_decoder_init_filePtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(
              ffi.Pointer<mab_audio_decoder>,
              ffi.Pointer<ffi.Char>,
              mab_audio_decoder_config)>>('mab_audio_decoder_init_file');
  late final _mab_audio_decoder_init_file =
      _mab_audio_decoder_init_filePtr.asFunction<
          int Function(ffi.Pointer<mab_audio_decoder>, ffi.Pointer<ffi.Char>,
              mab_audio_decoder_config)>(isLeaf: true);

  int mab_audio_decoder_decode(
    ffi.Pointer<mab_audio_decoder> pDecoder,
    ffi.Pointer<ffi.Void> pFramesOut,
    int frameCount,
    ffi.Pointer<uint64> pFramesRead,
  ) {
    return _mab_audio_decoder_decode(
      pDecoder,
      pFramesOut,
      frameCount,
      pFramesRead,
    );
  }

  late final _mab_audio_decoder_decodePtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(
              ffi.Pointer<mab_audio_decoder>,
              ffi.Pointer<ffi.Void>,
              uint64,
              ffi.Pointer<uint64>)>>('mab_audio_decoder_decode');
  late final _mab_audio_decoder_decode =
      _mab_audio_decoder_decodePtr.asFunction<
          int Function(ffi.Pointer<mab_audio_decoder>, ffi.Pointer<ffi.Void>,
              int, ffi.Pointer<uint64>)>();

  int mab_audio_decoder_get_cursor(
    ffi.Pointer<mab_audio_decoder> pDecoder,
    ffi.Pointer<uint64> pCursor,
  ) {
    return _mab_audio_decoder_get_cursor(
      pDecoder,
      pCursor,
    );
  }

  late final _mab_audio_decoder_get_cursorPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(ffi.Pointer<mab_audio_decoder>,
              ffi.Pointer<uint64>)>>('mab_audio_decoder_get_cursor');
  late final _mab_audio_decoder_get_cursor =
      _mab_audio_decoder_get_cursorPtr.asFunction<
          int Function(ffi.Pointer<mab_audio_decoder>, ffi.Pointer<uint64>)>();

  int mab_audio_decoder_set_cursor(
    ffi.Pointer<mab_audio_decoder> pDecoder,
    int cursor,
  ) {
    return _mab_audio_decoder_set_cursor(
      pDecoder,
      cursor,
    );
  }

  late final _mab_audio_decoder_set_cursorPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(ffi.Pointer<mab_audio_decoder>,
              uint64)>>('mab_audio_decoder_set_cursor');
  late final _mab_audio_decoder_set_cursor = _mab_audio_decoder_set_cursorPtr
      .asFunction<int Function(ffi.Pointer<mab_audio_decoder>, int)>();

  int mab_audio_decoder_get_length(
    ffi.Pointer<mab_audio_decoder> pDecoder,
    ffi.Pointer<uint64> pLength,
  ) {
    return _mab_audio_decoder_get_length(
      pDecoder,
      pLength,
    );
  }

  late final _mab_audio_decoder_get_lengthPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(ffi.Pointer<mab_audio_decoder>,
              ffi.Pointer<uint64>)>>('mab_audio_decoder_get_length');
  late final _mab_audio_decoder_get_length =
      _mab_audio_decoder_get_lengthPtr.asFunction<
          int Function(ffi.Pointer<mab_audio_decoder>, ffi.Pointer<uint64>)>();

  int mab_audio_decoder_uninit(
    ffi.Pointer<mab_audio_decoder> pDecoder,
  ) {
    return _mab_audio_decoder_uninit(
      pDecoder,
    );
  }

  late final _mab_audio_decoder_uninitPtr = _lookup<
          ffi
          .NativeFunction<mab_result Function(ffi.Pointer<mab_audio_decoder>)>>(
      'mab_audio_decoder_uninit');
  late final _mab_audio_decoder_uninit = _mab_audio_decoder_uninitPtr
      .asFunction<int Function(ffi.Pointer<mab_audio_decoder>)>();

  mab_low_pass_filter_config mab_low_pass_filter_config_init(
    int format,
    int sampleRate,
    int channels,
    int order,
    double cutoffFrequency,
  ) {
    return _mab_low_pass_filter_config_init(
      format,
      sampleRate,
      channels,
      order,
      cutoffFrequency,
    );
  }

  late final _mab_low_pass_filter_config_initPtr = _lookup<
      ffi.NativeFunction<
          mab_low_pass_filter_config Function(ffi.Int32, u_int32_t, u_int32_t,
              u_int32_t, ffi.Double)>>('mab_low_pass_filter_config_init');
  late final _mab_low_pass_filter_config_init =
      _mab_low_pass_filter_config_initPtr.asFunction<
          mab_low_pass_filter_config Function(
              int, int, int, int, double)>(isLeaf: true);

  int mab_low_pass_filter_init(
    ffi.Pointer<mab_low_pass_filter> pLPF,
    mab_low_pass_filter_config config,
  ) {
    return _mab_low_pass_filter_init(
      pLPF,
      config,
    );
  }

  late final _mab_low_pass_filter_initPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(ffi.Pointer<mab_low_pass_filter>,
              mab_low_pass_filter_config)>>('mab_low_pass_filter_init');
  late final _mab_low_pass_filter_init =
      _mab_low_pass_filter_initPtr.asFunction<
          int Function(ffi.Pointer<mab_low_pass_filter>,
              mab_low_pass_filter_config)>(isLeaf: true);

  int mab_low_pass_filter_process(
    ffi.Pointer<mab_low_pass_filter> pLPF,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _mab_low_pass_filter_process(
      pLPF,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _mab_low_pass_filter_processPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(
              ffi.Pointer<mab_low_pass_filter>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              u_int64_t)>>('mab_low_pass_filter_process');
  late final _mab_low_pass_filter_process =
      _mab_low_pass_filter_processPtr.asFunction<
          int Function(ffi.Pointer<mab_low_pass_filter>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>(isLeaf: true);

  int mab_low_pass_filter_reinit(
    ffi.Pointer<mab_low_pass_filter> pLPF,
    mab_low_pass_filter_config config,
  ) {
    return _mab_low_pass_filter_reinit(
      pLPF,
      config,
    );
  }

  late final _mab_low_pass_filter_reinitPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(ffi.Pointer<mab_low_pass_filter>,
              mab_low_pass_filter_config)>>('mab_low_pass_filter_reinit');
  late final _mab_low_pass_filter_reinit =
      _mab_low_pass_filter_reinitPtr.asFunction<
          int Function(ffi.Pointer<mab_low_pass_filter>,
              mab_low_pass_filter_config)>(isLeaf: true);

  int mab_low_pass_filter_get_latency(
    ffi.Pointer<mab_low_pass_filter> pLPF,
  ) {
    return _mab_low_pass_filter_get_latency(
      pLPF,
    );
  }

  late final _mab_low_pass_filter_get_latencyPtr = _lookup<
          ffi.NativeFunction<
              u_int32_t Function(ffi.Pointer<mab_low_pass_filter>)>>(
      'mab_low_pass_filter_get_latency');
  late final _mab_low_pass_filter_get_latency =
      _mab_low_pass_filter_get_latencyPtr
          .asFunction<int Function(ffi.Pointer<mab_low_pass_filter>)>(
              isLeaf: true);

  void mab_low_pass_filter_uninit(
    ffi.Pointer<mab_low_pass_filter> pLPF,
  ) {
    return _mab_low_pass_filter_uninit(
      pLPF,
    );
  }

  late final _mab_low_pass_filter_uninitPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<mab_low_pass_filter>)>>(
      'mab_low_pass_filter_uninit');
  late final _mab_low_pass_filter_uninit = _mab_low_pass_filter_uninitPtr
      .asFunction<void Function(ffi.Pointer<mab_low_pass_filter>)>(
          isLeaf: true);

  mab_high_pass_filter_config mab_high_pass_filter_config_init(
    int format,
    int sampleRate,
    int channels,
    int order,
    double cutoffFrequency,
  ) {
    return _mab_high_pass_filter_config_init(
      format,
      sampleRate,
      channels,
      order,
      cutoffFrequency,
    );
  }

  late final _mab_high_pass_filter_config_initPtr = _lookup<
      ffi.NativeFunction<
          mab_high_pass_filter_config Function(ffi.Int32, u_int32_t, u_int32_t,
              u_int32_t, ffi.Double)>>('mab_high_pass_filter_config_init');
  late final _mab_high_pass_filter_config_init =
      _mab_high_pass_filter_config_initPtr.asFunction<
          mab_high_pass_filter_config Function(
              int, int, int, int, double)>(isLeaf: true);

  int mab_high_pass_filter_init(
    ffi.Pointer<mab_high_pass_filter> pHPF,
    mab_high_pass_filter_config config,
  ) {
    return _mab_high_pass_filter_init(
      pHPF,
      config,
    );
  }

  late final _mab_high_pass_filter_initPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(ffi.Pointer<mab_high_pass_filter>,
              mab_high_pass_filter_config)>>('mab_high_pass_filter_init');
  late final _mab_high_pass_filter_init =
      _mab_high_pass_filter_initPtr.asFunction<
          int Function(ffi.Pointer<mab_high_pass_filter>,
              mab_high_pass_filter_config)>(isLeaf: true);

  int mab_high_pass_filter_process(
    ffi.Pointer<mab_high_pass_filter> pHPF,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _mab_high_pass_filter_process(
      pHPF,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _mab_high_pass_filter_processPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(
              ffi.Pointer<mab_high_pass_filter>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              u_int64_t)>>('mab_high_pass_filter_process');
  late final _mab_high_pass_filter_process =
      _mab_high_pass_filter_processPtr.asFunction<
          int Function(ffi.Pointer<mab_high_pass_filter>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>(isLeaf: true);

  int mab_high_pass_filter_reinit(
    ffi.Pointer<mab_high_pass_filter> pHPF,
    mab_high_pass_filter_config config,
  ) {
    return _mab_high_pass_filter_reinit(
      pHPF,
      config,
    );
  }

  late final _mab_high_pass_filter_reinitPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(ffi.Pointer<mab_high_pass_filter>,
              mab_high_pass_filter_config)>>('mab_high_pass_filter_reinit');
  late final _mab_high_pass_filter_reinit =
      _mab_high_pass_filter_reinitPtr.asFunction<
          int Function(ffi.Pointer<mab_high_pass_filter>,
              mab_high_pass_filter_config)>(isLeaf: true);

  int mab_high_pass_filter_get_latency(
    ffi.Pointer<mab_high_pass_filter> pHPF,
  ) {
    return _mab_high_pass_filter_get_latency(
      pHPF,
    );
  }

  late final _mab_high_pass_filter_get_latencyPtr = _lookup<
          ffi.NativeFunction<
              u_int32_t Function(ffi.Pointer<mab_high_pass_filter>)>>(
      'mab_high_pass_filter_get_latency');
  late final _mab_high_pass_filter_get_latency =
      _mab_high_pass_filter_get_latencyPtr
          .asFunction<int Function(ffi.Pointer<mab_high_pass_filter>)>(
              isLeaf: true);

  void mab_high_pass_filter_uninit(
    ffi.Pointer<mab_high_pass_filter> pHPF,
  ) {
    return _mab_high_pass_filter_uninit(
      pHPF,
    );
  }

  late final _mab_high_pass_filter_uninitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<mab_high_pass_filter>)>>(
      'mab_high_pass_filter_uninit');
  late final _mab_high_pass_filter_uninit = _mab_high_pass_filter_uninitPtr
      .asFunction<void Function(ffi.Pointer<mab_high_pass_filter>)>(
          isLeaf: true);

  mab_low_shelf_filter_config mab_low_shelf_filter_config_init(
    int format,
    int sampleRate,
    int channels,
    double gainDb,
    double shelfSlope,
    double frequency,
  ) {
    return _mab_low_shelf_filter_config_init(
      format,
      sampleRate,
      channels,
      gainDb,
      shelfSlope,
      frequency,
    );
  }

  late final _mab_low_shelf_filter_config_initPtr = _lookup<
      ffi.NativeFunction<
          mab_low_shelf_filter_config Function(
              ffi.Int32,
              u_int32_t,
              u_int32_t,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('mab_low_shelf_filter_config_init');
  late final _mab_low_shelf_filter_config_init =
      _mab_low_shelf_filter_config_initPtr.asFunction<
          mab_low_shelf_filter_config Function(
              int, int, int, double, double, double)>(isLeaf: true);

  int mab_low_shelf_filter_init(
    ffi.Pointer<mab_low_shelf_filter> pLSF,
    mab_low_shelf_filter_config config,
  ) {
    return _mab_low_shelf_filter_init(
      pLSF,
      config,
    );
  }

  late final _mab_low_shelf_filter_initPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(ffi.Pointer<mab_low_shelf_filter>,
              mab_low_shelf_filter_config)>>('mab_low_shelf_filter_init');
  late final _mab_low_shelf_filter_init =
      _mab_low_shelf_filter_initPtr.asFunction<
          int Function(ffi.Pointer<mab_low_shelf_filter>,
              mab_low_shelf_filter_config)>(isLeaf: true);

  int mab_low_shelf_filter_process(
    ffi.Pointer<mab_low_shelf_filter> pLSF,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _mab_low_shelf_filter_process(
      pLSF,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _mab_low_shelf_filter_processPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(
              ffi.Pointer<mab_low_shelf_filter>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              u_int64_t)>>('mab_low_shelf_filter_process');
  late final _mab_low_shelf_filter_process =
      _mab_low_shelf_filter_processPtr.asFunction<
          int Function(ffi.Pointer<mab_low_shelf_filter>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>(isLeaf: true);

  int mab_low_shelf_filter_reinit(
    ffi.Pointer<mab_low_shelf_filter> pLSF,
    mab_low_shelf_filter_config config,
  ) {
    return _mab_low_shelf_filter_reinit(
      pLSF,
      config,
    );
  }

  late final _mab_low_shelf_filter_reinitPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(ffi.Pointer<mab_low_shelf_filter>,
              mab_low_shelf_filter_config)>>('mab_low_shelf_filter_reinit');
  late final _mab_low_shelf_filter_reinit =
      _mab_low_shelf_filter_reinitPtr.asFunction<
          int Function(ffi.Pointer<mab_low_shelf_filter>,
              mab_low_shelf_filter_config)>(isLeaf: true);

  int mab_low_shelf_filter_get_latency(
    ffi.Pointer<mab_low_shelf_filter> pLSF,
  ) {
    return _mab_low_shelf_filter_get_latency(
      pLSF,
    );
  }

  late final _mab_low_shelf_filter_get_latencyPtr = _lookup<
          ffi.NativeFunction<
              u_int32_t Function(ffi.Pointer<mab_low_shelf_filter>)>>(
      'mab_low_shelf_filter_get_latency');
  late final _mab_low_shelf_filter_get_latency =
      _mab_low_shelf_filter_get_latencyPtr
          .asFunction<int Function(ffi.Pointer<mab_low_shelf_filter>)>(
              isLeaf: true);

  void mab_low_shelf_filter_uninit(
    ffi.Pointer<mab_low_shelf_filter> pLSF,
  ) {
    return _mab_low_shelf_filter_uninit(
      pLSF,
    );
  }

  late final _mab_low_shelf_filter_uninitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<mab_low_shelf_filter>)>>(
      'mab_low_shelf_filter_uninit');
  late final _mab_low_shelf_filter_uninit = _mab_low_shelf_filter_uninitPtr
      .asFunction<void Function(ffi.Pointer<mab_low_shelf_filter>)>(
          isLeaf: true);

  mab_high_shelf_filter_config mab_high_shelf_filter_config_init(
    int format,
    int sampleRate,
    int channels,
    double gainDb,
    double shelfSlope,
    double frequency,
  ) {
    return _mab_high_shelf_filter_config_init(
      format,
      sampleRate,
      channels,
      gainDb,
      shelfSlope,
      frequency,
    );
  }

  late final _mab_high_shelf_filter_config_initPtr = _lookup<
      ffi.NativeFunction<
          mab_high_shelf_filter_config Function(
              ffi.Int32,
              u_int32_t,
              u_int32_t,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('mab_high_shelf_filter_config_init');
  late final _mab_high_shelf_filter_config_init =
      _mab_high_shelf_filter_config_initPtr.asFunction<
          mab_high_shelf_filter_config Function(
              int, int, int, double, double, double)>(isLeaf: true);

  int mab_high_shelf_filter_init(
    ffi.Pointer<mab_high_shelf_filter> pHSF,
    mab_high_shelf_filter_config config,
  ) {
    return _mab_high_shelf_filter_init(
      pHSF,
      config,
    );
  }

  late final _mab_high_shelf_filter_initPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(ffi.Pointer<mab_high_shelf_filter>,
              mab_high_shelf_filter_config)>>('mab_high_shelf_filter_init');
  late final _mab_high_shelf_filter_init =
      _mab_high_shelf_filter_initPtr.asFunction<
          int Function(ffi.Pointer<mab_high_shelf_filter>,
              mab_high_shelf_filter_config)>(isLeaf: true);

  int mab_high_shelf_filter_process(
    ffi.Pointer<mab_high_shelf_filter> pHSF,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _mab_high_shelf_filter_process(
      pHSF,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _mab_high_shelf_filter_processPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(
              ffi.Pointer<mab_high_shelf_filter>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              u_int64_t)>>('mab_high_shelf_filter_process');
  late final _mab_high_shelf_filter_process =
      _mab_high_shelf_filter_processPtr.asFunction<
          int Function(ffi.Pointer<mab_high_shelf_filter>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>(isLeaf: true);

  int mab_high_shelf_filter_reinit(
    ffi.Pointer<mab_high_shelf_filter> pHSF,
    mab_high_shelf_filter_config config,
  ) {
    return _mab_high_shelf_filter_reinit(
      pHSF,
      config,
    );
  }

  late final _mab_high_shelf_filter_reinitPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(ffi.Pointer<mab_high_shelf_filter>,
              mab_high_shelf_filter_config)>>('mab_high_shelf_filter_reinit');
  late final _mab_high_shelf_filter_reinit =
      _mab_high_shelf_filter_reinitPtr.asFunction<
          int Function(ffi.Pointer<mab_high_shelf_filter>,
              mab_high_shelf_filter_config)>(isLeaf: true);

  int mab_high_shelf_filter_get_latency(
    ffi.Pointer<mab_high_shelf_filter> pHSF,
  ) {
    return _mab_high_shelf_filter_get_latency(
      pHSF,
    );
  }

  late final _mab_high_shelf_filter_get_latencyPtr = _lookup<
          ffi.NativeFunction<
              u_int32_t Function(ffi.Pointer<mab_high_shelf_filter>)>>(
      'mab_high_shelf_filter_get_latency');
  late final _mab_high_shelf_filter_get_latency =
      _mab_high_shelf_filter_get_latencyPtr
          .asFunction<int Function(ffi.Pointer<mab_high_shelf_filter>)>(
              isLeaf: true);

  void mab_high_shelf_filter_uninit(
    ffi.Pointer<mab_high_shelf_filter> pHSF,
  ) {
    return _mab_high_shelf_filter_uninit(
      pHSF,
    );
  }

  late final _mab_high_shelf_filter_uninitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<mab_high_shelf_filter>)>>(
      'mab_high_shelf_filter_uninit');
  late final _mab_high_shelf_filter_uninit = _mab_high_shelf_filter_uninitPtr
      .asFunction<void Function(ffi.Pointer<mab_high_shelf_filter>)>(
          isLeaf: true);

  mab_peaking_eq_filter_config mab_peaking_eq_filter_config_init(
    int format,
    int sampleRate,
    int channels,
    double gainDb,
    double q,
    double frequency,
  ) {
    return _mab_peaking_eq_filter_config_init(
      format,
      sampleRate,
      channels,
      gainDb,
      q,
      frequency,
    );
  }

  late final _mab_peaking_eq_filter_config_initPtr = _lookup<
      ffi.NativeFunction<
          mab_peaking_eq_filter_config Function(
              ffi.Int32,
              u_int32_t,
              u_int32_t,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('mab_peaking_eq_filter_config_init');
  late final _mab_peaking_eq_filter_config_init =
      _mab_peaking_eq_filter_config_initPtr.asFunction<
          mab_peaking_eq_filter_config Function(
              int, int, int, double, double, double)>(isLeaf: true);

  int mab_peaking_eq_filter_init(
    ffi.Pointer<mab_peaking_eq_filter> pEQ,
    mab_peaking_eq_filter_config config,
  ) {
    return _mab_peaking_eq_filter_init(
      pEQ,
      config,
    );
  }

  late final _mab_peaking_eq_filter_initPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(ffi.Pointer<mab_peaking_eq_filter>,
              mab_peaking_eq_filter_config)>>('mab_peaking_eq_filter_init');
  late final _mab_peaking_eq_filter_init =
      _mab_peaking_eq_filter_initPtr.asFunction<
          int Function(ffi.Pointer<mab_peaking_eq_filter>,
              mab_peaking_eq_filter_config)>(isLeaf: true);

  int mab_peaking_eq_filter_process(
    ffi.Pointer<mab_peaking_eq_filter> pEQ,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _mab_peaking_eq_filter_process(
      pEQ,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _mab_peaking_eq_filter_processPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(
              ffi.Pointer<mab_peaking_eq_filter>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              u_int64_t)>>('mab_peaking_eq_filter_process');
  late final _mab_peaking_eq_filter_process =
      _mab_peaking_eq_filter_processPtr.asFunction<
          int Function(ffi.Pointer<mab_peaking_eq_filter>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>(isLeaf: true);

  int mab_peaking_eq_filter_reinit(
    ffi.Pointer<mab_peaking_eq_filter> pEQ,
    mab_peaking_eq_filter_config config,
  ) {
    return _mab_peaking_eq_filter_reinit(
      pEQ,
      config,
    );
  }

  late final _mab_peaking_eq_filter_reinitPtr = _lookup<
      ffi.NativeFunction<
          mab_result Function(ffi.Pointer<mab_peaking_eq_filter>,
              mab_peaking_eq_filter_config)>>('mab_peaking_eq_filter_reinit');
  late final _mab_peaking_eq_filter_reinit =
      _mab_peaking_eq_filter_reinitPtr.asFunction<
          int Function(ffi.Pointer<mab_peaking_eq_filter>,
              mab_peaking_eq_filter_config)>(isLeaf: true);

  int mab_peaking_eq_filter_get_latency(
    ffi.Pointer<mab_peaking_eq_filter> pEQ,
  ) {
    return _mab_peaking_eq_filter_get_latency(
      pEQ,
    );
  }

  late final _mab_peaking_eq_filter_get_latencyPtr = _lookup<
          ffi.NativeFunction<
              u_int32_t Function(ffi.Pointer<mab_peaking_eq_filter>)>>(
      'mab_peaking_eq_filter_get_latency');
  late final _mab_peaking_eq_filter_get_latency =
      _mab_peaking_eq_filter_get_latencyPtr
          .asFunction<int Function(ffi.Pointer<mab_peaking_eq_filter>)>(
              isLeaf: true);

  void mab_peaking_eq_filter_uninit(
    ffi.Pointer<mab_peaking_eq_filter> pEQ,
  ) {
    return _mab_peaking_eq_filter_uninit(
      pEQ,
    );
  }

  late final _mab_peaking_eq_filter_uninitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<mab_peaking_eq_filter>)>>(
      'mab_peaking_eq_filter_uninit');
  late final _mab_peaking_eq_filter_uninit = _mab_peaking_eq_filter_uninitPtr
      .asFunction<void Function(ffi.Pointer<mab_peaking_eq_filter>)>(
          isLeaf: true);
}

abstract class mab_format {
  static const int mab_format_unknown = 0;
  static const int mab_format_u8 = 1;
  static const int mab_format_s16 = 2;
  static const int mab_format_s24 = 3;
  static const int mab_format_s32 = 4;
  static const int mab_format_f32 = 5;
  static const int mab_format_count = 6;
}

abstract class mab_backend {
  static const int mab_backend_wasapi = 0;
  static const int mab_backend_dsound = 1;
  static const int mab_backend_winmm = 2;
  static const int mab_backend_coreaudio = 3;
  static const int mab_backend_sndio = 4;
  static const int mab_backend_audio4 = 5;
  static const int mab_backend_oss = 6;
  static const int mab_backend_pulseaudio = 7;
  static const int mab_backend_alsa = 8;
  static const int mab_backend_jack = 9;
  static const int mab_backend_aaudio = 10;
  static const int mab_backend_opensl = 11;
  static const int mab_backend_webaudio = 12;
}

abstract class mab_dither_mode {
  static const int mab_dither_mode_none = 0;
  static const int mab_dither_mode_rectangle = 1;
  static const int mab_dither_mode_triangle = 2;
}

abstract class mab_channel_mix_mode {
  static const int mab_channel_mix_mode_rectangular = 0;
  static const int mab_channel_mix_mode_simple = 1;
}

abstract class mab_device_type {
  static const int mab_device_type_playback = 1;
  static const int mab_device_type_capture = 2;
}

abstract class mab_device_state {
  static const int mab_device_state_uninitialized = 0;
  static const int mab_device_state_stopped = 1;
  static const int mab_device_state_started = 2;
  static const int mab_device_state_starting = 3;
  static const int mab_device_state_stopping = 4;
}

abstract class mab_device_notification_type {
  static const int mab_device_notification_type_started = 0;
  static const int mab_device_notification_type_stopped = 1;
  static const int mab_device_notification_type_rerouted = 2;
  static const int mab_device_notification_type_interruption_began = 3;
  static const int mab_device_notification_type_interruption_ended = 4;
}

abstract class mab_performance_profile {
  static const int mab_performance_profile_low_latency = 0;
  static const int mab_performance_profile_conservative = 1;
}

abstract class mab_seek_origin {
  static const int mab_seek_origin_start = 0;
  static const int mab_seek_origin_current = 1;
  static const int mab_seek_origin_end = 2;
}

abstract class mab_encoding_format {
  static const int mab_encoding_format_unknown = 0;
  static const int mab_encoding_format_wav = 1;
  static const int mab_encoding_format_flac = 2;
  static const int mab_encoding_format_mp3 = 3;
  static const int mab_encoding_format_vorbis = 4;
}

final class __mbstate_t extends ffi.Union {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> __mbstate8;

  @ffi.LongLong()
  external int _mbstateL;
}

abstract class idtype_t {
  static const int P_ALL = 0;
  static const int P_PID = 1;
  static const int P_PGID = 2;
}

final class arm_exception_state extends ffi.Struct {
  @__uint32_t()
  external int exception;

  @__uint32_t()
  external int fsr;

  @__uint32_t()
  external int far;
}

typedef __uint32_t = ffi.UnsignedInt;

final class arm_exception_state64 extends ffi.Struct {
  @__uint64_t()
  external int far;

  @__uint32_t()
  external int esr;

  @__uint32_t()
  external int exception;
}

typedef __uint64_t = ffi.UnsignedLongLong;

final class arm_thread_state extends ffi.Struct {
  @ffi.Array.multi([13])
  external ffi.Array<__uint32_t> r;

  @__uint32_t()
  external int sp;

  @__uint32_t()
  external int lr;

  @__uint32_t()
  external int pc;

  @__uint32_t()
  external int cpsr;
}

final class arm_thread_state64 extends ffi.Struct {
  @ffi.Array.multi([29])
  external ffi.Array<__uint64_t> x;

  @__uint64_t()
  external int fp;

  @__uint64_t()
  external int lr;

  @__uint64_t()
  external int sp;

  @__uint64_t()
  external int pc;

  @__uint32_t()
  external int cpsr;

  @__uint32_t()
  external int flags;
}

final class arm_vfp_state extends ffi.Struct {
  @ffi.Array.multi([64])
  external ffi.Array<__uint32_t> r;

  @__uint32_t()
  external int fpscr;
}

final class arm_neon_state64 extends ffi.Opaque {}

final class arm_neon_state extends ffi.Opaque {}

final class __arm_pagein_state extends ffi.Struct {
  @ffi.Int()
  external int __pagein_error;
}

final class arm_legacy_debug_state extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> bvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> bcr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> wvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> wcr;
}

final class arm_debug_state32 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> bvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> bcr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> wvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> wcr;

  @__uint64_t()
  external int mdscr_el1;
}

final class arm_debug_state64 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> bvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> bcr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> wvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> wcr;

  @__uint64_t()
  external int mdscr_el1;
}

final class arm_cpmu_state64 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> ctrs;
}

final class mcontext32 extends ffi.Struct {
  external arm_exception_state es;

  external arm_thread_state ss;

  external arm_vfp_state fs;
}

final class mcontext64 extends ffi.Opaque {}

final class sigaltstack extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ss_sp;

  @__darwin_size_t()
  external int ss_size;

  @ffi.Int()
  external int ss_flags;
}

typedef __darwin_size_t = ffi.UnsignedLong;

final class ucontext extends ffi.Struct {
  @ffi.Int()
  external int uc_onstack;

  @__darwin_sigset_t()
  external int uc_sigmask;

  external sigaltstack uc_stack;

  external ffi.Pointer<ucontext> uc_link;

  @__darwin_size_t()
  external int uc_mcsize;

  external ffi.Pointer<mcontext64> uc_mcontext;
}

typedef __darwin_sigset_t = __uint32_t;

final class sigval extends ffi.Union {
  @ffi.Int()
  external int sival_int;

  external ffi.Pointer<ffi.Void> sival_ptr;
}

final class __siginfo extends ffi.Struct {
  @ffi.Int()
  external int si_signo;

  @ffi.Int()
  external int si_errno;

  @ffi.Int()
  external int si_code;

  @pid_t()
  external int si_pid;

  @uid_t()
  external int si_uid;

  @ffi.Int()
  external int si_status;

  external ffi.Pointer<ffi.Void> si_addr;

  external sigval si_value;

  @ffi.Long()
  external int si_band;

  @ffi.Array.multi([7])
  external ffi.Array<ffi.UnsignedLong> __pad;
}

typedef pid_t = __darwin_pid_t;
typedef __darwin_pid_t = __int32_t;
typedef __int32_t = ffi.Int;
typedef uid_t = __darwin_uid_t;
typedef __darwin_uid_t = __uint32_t;

final class __sigaction_u extends ffi.Union {
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>
      __sa_handler;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int, ffi.Pointer<__siginfo>, ffi.Pointer<ffi.Void>)>>
      __sa_sigaction;
}

final class __sigaction extends ffi.Struct {
  external __sigaction_u __sigaction_u1;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<siginfo_t>, ffi.Pointer<ffi.Void>)>> sa_tramp;

  @sigset_t()
  external int sa_mask;

  @ffi.Int()
  external int sa_flags;
}

typedef siginfo_t = __siginfo;
typedef sigset_t = __darwin_sigset_t;

final class sigaction extends ffi.Struct {
  external __sigaction_u __sigaction_u1;

  @sigset_t()
  external int sa_mask;

  @ffi.Int()
  external int sa_flags;
}

final class sigvec extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>
      sv_handler;

  @ffi.Int()
  external int sv_mask;

  @ffi.Int()
  external int sv_flags;
}

final class sigstack extends ffi.Struct {
  external ffi.Pointer<ffi.Char> ss_sp;

  @ffi.Int()
  external int ss_onstack;
}

final class timeval extends ffi.Struct {
  @__darwin_time_t()
  external int tv_sec;

  @__darwin_suseconds_t()
  external int tv_usec;
}

typedef __darwin_time_t = ffi.Long;
typedef __darwin_suseconds_t = __int32_t;

final class user32_timeval extends ffi.Struct {
  @user32_time_t()
  external int tv_sec;

  @__int32_t()
  external int tv_usec;
}

typedef user32_time_t = __int32_t;

final class user64_timeval extends ffi.Struct {
  @user64_time_t()
  external int tv_sec;

  @__int32_t()
  external int tv_usec;
}

typedef user64_time_t = __int64_t;
typedef __int64_t = ffi.LongLong;

final class rusage extends ffi.Struct {
  external timeval ru_utime;

  external timeval ru_stime;

  @ffi.Long()
  external int ru_maxrss;

  @ffi.Long()
  external int ru_ixrss;

  @ffi.Long()
  external int ru_idrss;

  @ffi.Long()
  external int ru_isrss;

  @ffi.Long()
  external int ru_minflt;

  @ffi.Long()
  external int ru_majflt;

  @ffi.Long()
  external int ru_nswap;

  @ffi.Long()
  external int ru_inblock;

  @ffi.Long()
  external int ru_oublock;

  @ffi.Long()
  external int ru_msgsnd;

  @ffi.Long()
  external int ru_msgrcv;

  @ffi.Long()
  external int ru_nsignals;

  @ffi.Long()
  external int ru_nvcsw;

  @ffi.Long()
  external int ru_nivcsw;
}

final class rusage_info_v0 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;
}

final class rusage_info_v1 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;
}

final class rusage_info_v2 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;
}

final class rusage_info_v3 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;
}

final class rusage_info_v4 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;

  @ffi.Uint64()
  external int ri_logical_writes;

  @ffi.Uint64()
  external int ri_lifetime_max_phys_footprint;

  @ffi.Uint64()
  external int ri_instructions;

  @ffi.Uint64()
  external int ri_cycles;

  @ffi.Uint64()
  external int ri_billed_energy;

  @ffi.Uint64()
  external int ri_serviced_energy;

  @ffi.Uint64()
  external int ri_interval_max_phys_footprint;

  @ffi.Uint64()
  external int ri_runnable_time;
}

final class rusage_info_v5 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;

  @ffi.Uint64()
  external int ri_logical_writes;

  @ffi.Uint64()
  external int ri_lifetime_max_phys_footprint;

  @ffi.Uint64()
  external int ri_instructions;

  @ffi.Uint64()
  external int ri_cycles;

  @ffi.Uint64()
  external int ri_billed_energy;

  @ffi.Uint64()
  external int ri_serviced_energy;

  @ffi.Uint64()
  external int ri_interval_max_phys_footprint;

  @ffi.Uint64()
  external int ri_runnable_time;

  @ffi.Uint64()
  external int ri_flags;
}

final class rusage_info_v6 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;

  @ffi.Uint64()
  external int ri_logical_writes;

  @ffi.Uint64()
  external int ri_lifetime_max_phys_footprint;

  @ffi.Uint64()
  external int ri_instructions;

  @ffi.Uint64()
  external int ri_cycles;

  @ffi.Uint64()
  external int ri_billed_energy;

  @ffi.Uint64()
  external int ri_serviced_energy;

  @ffi.Uint64()
  external int ri_interval_max_phys_footprint;

  @ffi.Uint64()
  external int ri_runnable_time;

  @ffi.Uint64()
  external int ri_flags;

  @ffi.Uint64()
  external int ri_user_ptime;

  @ffi.Uint64()
  external int ri_system_ptime;

  @ffi.Uint64()
  external int ri_pinstructions;

  @ffi.Uint64()
  external int ri_pcycles;

  @ffi.Uint64()
  external int ri_energy_nj;

  @ffi.Uint64()
  external int ri_penergy_nj;

  @ffi.Array.multi([14])
  external ffi.Array<ffi.Uint64> ri_reserved;
}

final class rusage_superset extends ffi.Struct {
  external rusage ru;

  external rusage_info_current ri;
}

typedef rusage_info_current = rusage_info_v6;

final class rusage_info_child extends ffi.Struct {
  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;
}

final class user64_rusage extends ffi.Struct {
  external user64_timeval ru_utime;

  external user64_timeval ru_stime;

  @user64_long_t()
  external int ru_maxrss;

  @user64_long_t()
  external int ru_ixrss;

  @user64_long_t()
  external int ru_idrss;

  @user64_long_t()
  external int ru_isrss;

  @user64_long_t()
  external int ru_minflt;

  @user64_long_t()
  external int ru_majflt;

  @user64_long_t()
  external int ru_nswap;

  @user64_long_t()
  external int ru_inblock;

  @user64_long_t()
  external int ru_oublock;

  @user64_long_t()
  external int ru_msgsnd;

  @user64_long_t()
  external int ru_msgrcv;

  @user64_long_t()
  external int ru_nsignals;

  @user64_long_t()
  external int ru_nvcsw;

  @user64_long_t()
  external int ru_nivcsw;
}

typedef user64_long_t = __int64_t;

final class user32_rusage extends ffi.Struct {
  external user32_timeval ru_utime;

  external user32_timeval ru_stime;

  @user32_long_t()
  external int ru_maxrss;

  @user32_long_t()
  external int ru_ixrss;

  @user32_long_t()
  external int ru_idrss;

  @user32_long_t()
  external int ru_isrss;

  @user32_long_t()
  external int ru_minflt;

  @user32_long_t()
  external int ru_majflt;

  @user32_long_t()
  external int ru_nswap;

  @user32_long_t()
  external int ru_inblock;

  @user32_long_t()
  external int ru_oublock;

  @user32_long_t()
  external int ru_msgsnd;

  @user32_long_t()
  external int ru_msgrcv;

  @user32_long_t()
  external int ru_nsignals;

  @user32_long_t()
  external int ru_nvcsw;

  @user32_long_t()
  external int ru_nivcsw;
}

typedef user32_long_t = __int32_t;

final class rlimit extends ffi.Struct {
  @rlim_t()
  external int rlim_cur;

  @rlim_t()
  external int rlim_max;
}

typedef rlim_t = __uint64_t;

final class proc_rlimit_control_wakeupmon extends ffi.Struct {
  @ffi.Uint32()
  external int wm_flags;

  @ffi.Int32()
  external int wm_rate;
}

@ffi.Packed(1)
final class _OSUnalignedU16 extends ffi.Struct {
  @ffi.Uint16()
  external int __val;
}

@ffi.Packed(1)
final class _OSUnalignedU32 extends ffi.Struct {
  @ffi.Uint32()
  external int __val;
}

@ffi.Packed(1)
final class _OSUnalignedU64 extends ffi.Struct {
  @ffi.Uint64()
  external int __val;
}

final class wait extends ffi.Opaque {}

final class div_t extends ffi.Struct {
  @ffi.Int()
  external int quot;

  @ffi.Int()
  external int rem;
}

final class ldiv_t extends ffi.Struct {
  @ffi.Long()
  external int quot;

  @ffi.Long()
  external int rem;
}

final class lldiv_t extends ffi.Struct {
  @ffi.LongLong()
  external int quot;

  @ffi.LongLong()
  external int rem;
}

typedef malloc_type_id_t = ffi.UnsignedLongLong;

final class _malloc_zone_t extends ffi.Opaque {}

typedef malloc_zone_t = _malloc_zone_t;
typedef dev_t = __darwin_dev_t;
typedef __darwin_dev_t = __int32_t;
typedef mode_t = __darwin_mode_t;
typedef __darwin_mode_t = __uint16_t;
typedef __uint16_t = ffi.UnsignedShort;

final class fd_set extends ffi.Struct {
  @ffi.Array.multi([32])
  external ffi.Array<__int32_t> fds_bits;
}

final class mab_audio_encoder_config extends ffi.Struct {
  @ffi.Int32()
  external int encodingFormat;

  @ffi.Int32()
  external int format;

  @ffi.Int()
  external int sampleRate;

  @ffi.Int()
  external int channels;
}

final class mab_audio_encoder extends ffi.Struct {
  external ffi.Pointer<ffi.Void> pData;

  external ffi.Pointer<ffi.Void> pUserData;
}

typedef mab_result = ffi.Int;
typedef mab_audio_encoder_write_proc = ffi.Pointer<
    ffi.NativeFunction<
        mab_result Function(
            ffi.Pointer<mab_audio_encoder> pEncoder,
            ffi.Pointer<ffi.Void> pBufferIn,
            ffi.Size bytesToWrite,
            ffi.Pointer<ffi.Size> pBytesWritten)>>;
typedef mab_audio_encoder_seek_proc = ffi.Pointer<
    ffi.NativeFunction<
        mab_result Function(ffi.Pointer<mab_audio_encoder> pEncoder,
            ffi.Int64 byteOffset, ffi.Int32 origin)>>;
typedef uint64 = ffi.UnsignedLongLong;

final class __sbuf extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedChar> _base;

  @ffi.Int()
  external int _size;
}

final class __sFILEX extends ffi.Opaque {}

final class __sFILE extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedChar> _p;

  @ffi.Int()
  external int _r;

  @ffi.Int()
  external int _w;

  @ffi.Short()
  external int _flags;

  @ffi.Short()
  external int _file;

  external __sbuf _bf;

  @ffi.Int()
  external int _lbfsize;

  external ffi.Pointer<ffi.Void> _cookie;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>
      _close;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>> _read;

  external ffi.Pointer<
      ffi.NativeFunction<
          fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>> _seek;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>> _write;

  external __sbuf _ub;

  external ffi.Pointer<__sFILEX> _extra;

  @ffi.Int()
  external int _ur;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedChar> _ubuf;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.UnsignedChar> _nbuf;

  external __sbuf _lb;

  @ffi.Int()
  external int _blksize;

  @fpos_t()
  external int _offset;
}

typedef fpos_t = __darwin_off_t;
typedef __darwin_off_t = __int64_t;
typedef FILE = __sFILE;
typedef va_list = __darwin_va_list;
typedef __darwin_va_list = __builtin_va_list;
typedef __builtin_va_list = ffi.Pointer<ffi.Char>;
typedef off_t = __darwin_off_t;
typedef ssize_t = __darwin_ssize_t;
typedef __darwin_ssize_t = ffi.Long;

final class timespec extends ffi.Struct {
  @__darwin_time_t()
  external int tv_sec;

  @ffi.Long()
  external int tv_nsec;
}

final class tm extends ffi.Struct {
  @ffi.Int()
  external int tm_sec;

  @ffi.Int()
  external int tm_min;

  @ffi.Int()
  external int tm_hour;

  @ffi.Int()
  external int tm_mday;

  @ffi.Int()
  external int tm_mon;

  @ffi.Int()
  external int tm_year;

  @ffi.Int()
  external int tm_wday;

  @ffi.Int()
  external int tm_yday;

  @ffi.Int()
  external int tm_isdst;

  @ffi.Long()
  external int tm_gmtoff;

  external ffi.Pointer<ffi.Char> tm_zone;
}

typedef clock_t = __darwin_clock_t;
typedef __darwin_clock_t = ffi.UnsignedLong;
typedef time_t = __darwin_time_t;

abstract class clockid_t {
  static const int _CLOCK_REALTIME = 0;
  static const int _CLOCK_MONOTONIC = 6;
  static const int _CLOCK_MONOTONIC_RAW = 4;
  static const int _CLOCK_MONOTONIC_RAW_APPROX = 5;
  static const int _CLOCK_UPTIME_RAW = 8;
  static const int _CLOCK_UPTIME_RAW_APPROX = 9;
  static const int _CLOCK_PROCESS_CPUTIME_ID = 12;
  static const int _CLOCK_THREAD_CPUTIME_ID = 16;
}

final class _RuneEntry extends ffi.Struct {
  @__darwin_rune_t()
  external int __min;

  @__darwin_rune_t()
  external int __max;

  @__darwin_rune_t()
  external int __map;

  external ffi.Pointer<__uint32_t> __types;
}

typedef __darwin_rune_t = __darwin_wchar_t;
typedef __darwin_wchar_t = ffi.Int;

final class _RuneRange extends ffi.Struct {
  @ffi.Int()
  external int __nranges;

  external ffi.Pointer<_RuneEntry> __ranges;
}

final class _RuneCharClass extends ffi.Struct {
  @ffi.Array.multi([14])
  external ffi.Array<ffi.Char> __name;

  @__uint32_t()
  external int __mask;
}

final class _RuneLocale extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __magic;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> __encoding;

  external ffi.Pointer<
      ffi.NativeFunction<
          __darwin_rune_t Function(ffi.Pointer<ffi.Char>, __darwin_size_t,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>> __sgetrune;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(__darwin_rune_t, ffi.Pointer<ffi.Char>,
              __darwin_size_t, ffi.Pointer<ffi.Pointer<ffi.Char>>)>> __sputrune;

  @__darwin_rune_t()
  external int __invalid_rune;

  @ffi.Array.multi([256])
  external ffi.Array<__uint32_t> __runetype;

  @ffi.Array.multi([256])
  external ffi.Array<__darwin_rune_t> __maplower;

  @ffi.Array.multi([256])
  external ffi.Array<__darwin_rune_t> __mapupper;

  external _RuneRange __runetype_ext;

  external _RuneRange __maplower_ext;

  external _RuneRange __mapupper_ext;

  external ffi.Pointer<ffi.Void> __variable;

  @ffi.Int()
  external int __variable_len;

  @ffi.Int()
  external int __ncharclasses;

  external ffi.Pointer<_RuneCharClass> __charclasses;
}

typedef __darwin_ct_rune_t = ffi.Int;
typedef wctype_t = __darwin_wctype_t;
typedef __darwin_wctype_t = __uint32_t;
typedef wint_t = __darwin_wint_t;
typedef __darwin_wint_t = ffi.Int;
typedef mbstate_t = __darwin_mbstate_t;
typedef __darwin_mbstate_t = __mbstate_t;

final class mab_device_context extends ffi.Struct {
  external ffi.Pointer<ffi.Void> pData;

  external ffi.Pointer<ffi.Void> pMaContext;

  @ffi.Int32()
  external int backend;
}

final class mab_device_id extends ffi.Union {
  @ffi.Array.multi([64])
  external ffi.Array<ffi.WChar> wasapi;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Char> dsound;

  @ffi.UnsignedInt()
  external int winmm;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> alsa;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> pulse;

  @ffi.Int()
  external int jack;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> coreaudio;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> sndio;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> audio4;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Char> oss;

  @ffi.Int()
  external int aaudio;

  @ffi.UnsignedInt()
  external int opensl;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> webaudio;

  @ffi.Int()
  external int nullbackend;
}

final class mab_device_info extends ffi.Struct {
  external mab_device_id id;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> name;

  @mab_bool()
  external int isDefault;
}

typedef mab_bool = ffi.Int;

final class mab_device extends ffi.Struct {
  external mab_device_config config;

  @ffi.Int()
  external int sampleRate;

  @ffi.Int()
  external int channels;

  external ffi.Pointer<ffi.Void> pData;
}

final class mab_device_config extends ffi.Struct {
  @ffi.Int32()
  external int type;

  @ffi.Int32()
  external int format;

  @ffi.Int()
  external int sampleRate;

  @ffi.Int()
  external int channels;

  @ffi.Int()
  external int bufferFrameSize;

  @mab_bool()
  external int noFixedSizedCallback;

  @ffi.Int64()
  external int notificationPortId;

  @ffi.Int32()
  external int channelMixMode;

  @ffi.Int32()
  external int performanceProfile;
}

final class mab_device_notification extends ffi.Struct {
  @ffi.Int32()
  external int type;
}

final class mab_audio_converter_config extends ffi.Struct {
  external UnnamedStruct3 input;

  external UnnamedStruct4 output;

  @ffi.Int32()
  external int ditherMode;

  @ffi.Int32()
  external int channelMixMode;
}

final class UnnamedStruct3 extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ffi.Int()
  external int sampleRate;

  @ffi.Int()
  external int channels;
}

final class UnnamedStruct4 extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ffi.Int()
  external int sampleRate;

  @ffi.Int()
  external int channels;
}

final class mab_audio_converter extends ffi.Struct {
  external mab_audio_converter_config config;

  external ffi.Pointer<ffi.Void> pData;
}

final class mab_audio_decoder_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ffi.Int()
  external int sampleRate;

  @ffi.Int()
  external int channels;

  @ffi.Int32()
  external int ditherMode;

  @ffi.Int32()
  external int channelMixMode;

  @ffi.Int32()
  external int encodingFormat;
}

final class mab_audio_decoder extends ffi.Struct {
  @ffi.Int()
  external int sampleRate;

  @ffi.Int()
  external int channels;

  external ffi.Pointer<ffi.Void> pData;

  external ffi.Pointer<ffi.Void> pUserData;
}

final class mab_audio_decoder_info extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ffi.Int()
  external int sampleRate;

  @ffi.Int()
  external int channels;

  @uint64()
  external int length;
}

typedef mab_audio_decoder_read_proc = ffi.Pointer<
    ffi.NativeFunction<
        mab_result Function(
            ffi.Pointer<mab_audio_decoder> pDecoder,
            ffi.Pointer<ffi.Void> pBufferOut,
            ffi.Size bytesToRead,
            ffi.Pointer<ffi.Size> pBytesRead)>>;
typedef mab_audio_decoder_seek_proc = ffi.Pointer<
    ffi.NativeFunction<
        mab_result Function(ffi.Pointer<mab_audio_decoder> pDecoder,
            ffi.Int64 byteOffset, ffi.Int32 origin)>>;

final class mab_low_pass_filter_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ffi.Int()
  external int sampleRate;

  @ffi.Int()
  external int channels;

  @ffi.Int()
  external int order;

  @ffi.Float()
  external double cutoffFrequency;
}

typedef u_int32_t = ffi.UnsignedInt;

final class mab_low_pass_filter extends ffi.Struct {
  external ffi.Pointer<ffi.Void> pData;
}

typedef u_int64_t = ffi.UnsignedLongLong;

final class mab_high_pass_filter_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ffi.Int()
  external int sampleRate;

  @ffi.Int()
  external int channels;

  @ffi.Int()
  external int order;

  @ffi.Float()
  external double cutoffFrequency;
}

final class mab_high_pass_filter extends ffi.Struct {
  external ffi.Pointer<ffi.Void> pData;
}

final class mab_low_shelf_filter_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ffi.Int()
  external int sampleRate;

  @ffi.Int()
  external int channels;

  @ffi.Double()
  external double gainDb;

  @ffi.Double()
  external double shelfSlope;

  @ffi.Double()
  external double frequency;
}

final class mab_low_shelf_filter extends ffi.Struct {
  external ffi.Pointer<ffi.Void> pData;
}

final class mab_high_shelf_filter_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ffi.Int()
  external int sampleRate;

  @ffi.Int()
  external int channels;

  @ffi.Double()
  external double gainDb;

  @ffi.Double()
  external double shelfSlope;

  @ffi.Double()
  external double frequency;
}

final class mab_high_shelf_filter extends ffi.Struct {
  external ffi.Pointer<ffi.Void> pData;
}

final class mab_peaking_eq_filter_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ffi.Int()
  external int sampleRate;

  @ffi.Int()
  external int channels;

  @ffi.Double()
  external double gainDb;

  @ffi.Double()
  external double q;

  @ffi.Double()
  external double frequency;
}

final class mab_peaking_eq_filter extends ffi.Struct {
  external ffi.Pointer<ffi.Void> pData;
}

const int NULL = 0;

const int __API_TO_BE_DEPRECATED = 100000;

const int __API_TO_BE_DEPRECATED_MACOS = 100000;

const int __API_TO_BE_DEPRECATED_IOS = 100000;

const int __API_TO_BE_DEPRECATED_MACCATALYST = 100000;

const int __API_TO_BE_DEPRECATED_WATCHOS = 100000;

const int __API_TO_BE_DEPRECATED_TVOS = 100000;

const int __API_TO_BE_DEPRECATED_DRIVERKIT = 100000;

const int __API_TO_BE_DEPRECATED_XROS = 100000;

const int __MAC_10_0 = 1000;

const int __MAC_10_1 = 1010;

const int __MAC_10_2 = 1020;

const int __MAC_10_3 = 1030;

const int __MAC_10_4 = 1040;

const int __MAC_10_5 = 1050;

const int __MAC_10_6 = 1060;

const int __MAC_10_7 = 1070;

const int __MAC_10_8 = 1080;

const int __MAC_10_9 = 1090;

const int __MAC_10_10 = 101000;

const int __MAC_10_10_2 = 101002;

const int __MAC_10_10_3 = 101003;

const int __MAC_10_11 = 101100;

const int __MAC_10_11_2 = 101102;

const int __MAC_10_11_3 = 101103;

const int __MAC_10_11_4 = 101104;

const int __MAC_10_12 = 101200;

const int __MAC_10_12_1 = 101201;

const int __MAC_10_12_2 = 101202;

const int __MAC_10_12_4 = 101204;

const int __MAC_10_13 = 101300;

const int __MAC_10_13_1 = 101301;

const int __MAC_10_13_2 = 101302;

const int __MAC_10_13_4 = 101304;

const int __MAC_10_14 = 101400;

const int __MAC_10_14_1 = 101401;

const int __MAC_10_14_4 = 101404;

const int __MAC_10_14_5 = 101405;

const int __MAC_10_14_6 = 101406;

const int __MAC_10_15 = 101500;

const int __MAC_10_15_1 = 101501;

const int __MAC_10_15_4 = 101504;

const int __MAC_10_16 = 101600;

const int __MAC_11_0 = 110000;

const int __MAC_11_1 = 110100;

const int __MAC_11_3 = 110300;

const int __MAC_11_4 = 110400;

const int __MAC_11_5 = 110500;

const int __MAC_11_6 = 110600;

const int __MAC_12_0 = 120000;

const int __MAC_12_1 = 120100;

const int __MAC_12_2 = 120200;

const int __MAC_12_3 = 120300;

const int __MAC_12_4 = 120400;

const int __MAC_12_5 = 120500;

const int __MAC_13_0 = 130000;

const int __MAC_13_1 = 130100;

const int __MAC_13_2 = 130200;

const int __MAC_13_3 = 130300;

const int __MAC_13_4 = 130400;

const int __MAC_14_0 = 140000;

const int __IPHONE_2_0 = 20000;

const int __IPHONE_2_1 = 20100;

const int __IPHONE_2_2 = 20200;

const int __IPHONE_3_0 = 30000;

const int __IPHONE_3_1 = 30100;

const int __IPHONE_3_2 = 30200;

const int __IPHONE_4_0 = 40000;

const int __IPHONE_4_1 = 40100;

const int __IPHONE_4_2 = 40200;

const int __IPHONE_4_3 = 40300;

const int __IPHONE_5_0 = 50000;

const int __IPHONE_5_1 = 50100;

const int __IPHONE_6_0 = 60000;

const int __IPHONE_6_1 = 60100;

const int __IPHONE_7_0 = 70000;

const int __IPHONE_7_1 = 70100;

const int __IPHONE_8_0 = 80000;

const int __IPHONE_8_1 = 80100;

const int __IPHONE_8_2 = 80200;

const int __IPHONE_8_3 = 80300;

const int __IPHONE_8_4 = 80400;

const int __IPHONE_9_0 = 90000;

const int __IPHONE_9_1 = 90100;

const int __IPHONE_9_2 = 90200;

const int __IPHONE_9_3 = 90300;

const int __IPHONE_10_0 = 100000;

const int __IPHONE_10_1 = 100100;

const int __IPHONE_10_2 = 100200;

const int __IPHONE_10_3 = 100300;

const int __IPHONE_11_0 = 110000;

const int __IPHONE_11_1 = 110100;

const int __IPHONE_11_2 = 110200;

const int __IPHONE_11_3 = 110300;

const int __IPHONE_11_4 = 110400;

const int __IPHONE_12_0 = 120000;

const int __IPHONE_12_1 = 120100;

const int __IPHONE_12_2 = 120200;

const int __IPHONE_12_3 = 120300;

const int __IPHONE_12_4 = 120400;

const int __IPHONE_13_0 = 130000;

const int __IPHONE_13_1 = 130100;

const int __IPHONE_13_2 = 130200;

const int __IPHONE_13_3 = 130300;

const int __IPHONE_13_4 = 130400;

const int __IPHONE_13_5 = 130500;

const int __IPHONE_13_6 = 130600;

const int __IPHONE_13_7 = 130700;

const int __IPHONE_14_0 = 140000;

const int __IPHONE_14_1 = 140100;

const int __IPHONE_14_2 = 140200;

const int __IPHONE_14_3 = 140300;

const int __IPHONE_14_5 = 140500;

const int __IPHONE_14_4 = 140400;

const int __IPHONE_14_6 = 140600;

const int __IPHONE_14_7 = 140700;

const int __IPHONE_14_8 = 140800;

const int __IPHONE_15_0 = 150000;

const int __IPHONE_15_1 = 150100;

const int __IPHONE_15_2 = 150200;

const int __IPHONE_15_3 = 150300;

const int __IPHONE_15_4 = 150400;

const int __IPHONE_15_5 = 150500;

const int __IPHONE_15_6 = 150600;

const int __IPHONE_16_0 = 160000;

const int __IPHONE_16_1 = 160100;

const int __IPHONE_16_2 = 160200;

const int __IPHONE_16_3 = 160300;

const int __IPHONE_16_4 = 160400;

const int __IPHONE_16_5 = 160500;

const int __IPHONE_17_0 = 170000;

const int __WATCHOS_1_0 = 10000;

const int __WATCHOS_2_0 = 20000;

const int __WATCHOS_2_1 = 20100;

const int __WATCHOS_2_2 = 20200;

const int __WATCHOS_3_0 = 30000;

const int __WATCHOS_3_1 = 30100;

const int __WATCHOS_3_1_1 = 30101;

const int __WATCHOS_3_2 = 30200;

const int __WATCHOS_4_0 = 40000;

const int __WATCHOS_4_1 = 40100;

const int __WATCHOS_4_2 = 40200;

const int __WATCHOS_4_3 = 40300;

const int __WATCHOS_5_0 = 50000;

const int __WATCHOS_5_1 = 50100;

const int __WATCHOS_5_2 = 50200;

const int __WATCHOS_5_3 = 50300;

const int __WATCHOS_6_0 = 60000;

const int __WATCHOS_6_1 = 60100;

const int __WATCHOS_6_2 = 60200;

const int __WATCHOS_7_0 = 70000;

const int __WATCHOS_7_1 = 70100;

const int __WATCHOS_7_2 = 70200;

const int __WATCHOS_7_3 = 70300;

const int __WATCHOS_7_4 = 70400;

const int __WATCHOS_7_5 = 70500;

const int __WATCHOS_7_6 = 70600;

const int __WATCHOS_8_0 = 80000;

const int __WATCHOS_8_1 = 80100;

const int __WATCHOS_8_3 = 80300;

const int __WATCHOS_8_4 = 80400;

const int __WATCHOS_8_5 = 80500;

const int __WATCHOS_8_6 = 80600;

const int __WATCHOS_8_7 = 80700;

const int __WATCHOS_9_0 = 90000;

const int __WATCHOS_9_1 = 90100;

const int __WATCHOS_9_2 = 90200;

const int __WATCHOS_9_3 = 90300;

const int __WATCHOS_9_4 = 90400;

const int __WATCHOS_9_5 = 90500;

const int __WATCHOS_10_0 = 100000;

const int __TVOS_9_0 = 90000;

const int __TVOS_9_1 = 90100;

const int __TVOS_9_2 = 90200;

const int __TVOS_10_0 = 100000;

const int __TVOS_10_0_1 = 100001;

const int __TVOS_10_1 = 100100;

const int __TVOS_10_2 = 100200;

const int __TVOS_11_0 = 110000;

const int __TVOS_11_1 = 110100;

const int __TVOS_11_2 = 110200;

const int __TVOS_11_3 = 110300;

const int __TVOS_11_4 = 110400;

const int __TVOS_12_0 = 120000;

const int __TVOS_12_1 = 120100;

const int __TVOS_12_2 = 120200;

const int __TVOS_12_3 = 120300;

const int __TVOS_12_4 = 120400;

const int __TVOS_13_0 = 130000;

const int __TVOS_13_2 = 130200;

const int __TVOS_13_3 = 130300;

const int __TVOS_13_4 = 130400;

const int __TVOS_14_0 = 140000;

const int __TVOS_14_1 = 140100;

const int __TVOS_14_2 = 140200;

const int __TVOS_14_3 = 140300;

const int __TVOS_14_5 = 140500;

const int __TVOS_14_6 = 140600;

const int __TVOS_14_7 = 140700;

const int __TVOS_15_0 = 150000;

const int __TVOS_15_1 = 150100;

const int __TVOS_15_2 = 150200;

const int __TVOS_15_3 = 150300;

const int __TVOS_15_4 = 150400;

const int __TVOS_15_5 = 150500;

const int __TVOS_15_6 = 150600;

const int __TVOS_16_0 = 160000;

const int __TVOS_16_1 = 160100;

const int __TVOS_16_2 = 160200;

const int __TVOS_16_3 = 160300;

const int __TVOS_16_4 = 160400;

const int __TVOS_16_5 = 160500;

const int __TVOS_17_0 = 170000;

const int __BRIDGEOS_2_0 = 20000;

const int __BRIDGEOS_3_0 = 30000;

const int __BRIDGEOS_3_1 = 30100;

const int __BRIDGEOS_3_4 = 30400;

const int __BRIDGEOS_4_0 = 40000;

const int __BRIDGEOS_4_1 = 40100;

const int __BRIDGEOS_5_0 = 50000;

const int __BRIDGEOS_5_1 = 50100;

const int __BRIDGEOS_5_3 = 50300;

const int __BRIDGEOS_6_0 = 60000;

const int __BRIDGEOS_6_2 = 60200;

const int __BRIDGEOS_6_4 = 60400;

const int __BRIDGEOS_6_5 = 60500;

const int __BRIDGEOS_6_6 = 60600;

const int __BRIDGEOS_7_0 = 70000;

const int __BRIDGEOS_7_1 = 70100;

const int __BRIDGEOS_7_2 = 70200;

const int __BRIDGEOS_7_3 = 70300;

const int __BRIDGEOS_7_4 = 70400;

const int __BRIDGEOS_8_0 = 80000;

const int __DRIVERKIT_19_0 = 190000;

const int __DRIVERKIT_20_0 = 200000;

const int __DRIVERKIT_21_0 = 210000;

const int __DRIVERKIT_22_0 = 220000;

const int __DRIVERKIT_22_4 = 220400;

const int __DRIVERKIT_22_5 = 220500;

const int __DRIVERKIT_23_0 = 230000;

const int __XROS_1_0 = 10000;

const int MAC_OS_X_VERSION_10_0 = 1000;

const int MAC_OS_X_VERSION_10_1 = 1010;

const int MAC_OS_X_VERSION_10_2 = 1020;

const int MAC_OS_X_VERSION_10_3 = 1030;

const int MAC_OS_X_VERSION_10_4 = 1040;

const int MAC_OS_X_VERSION_10_5 = 1050;

const int MAC_OS_X_VERSION_10_6 = 1060;

const int MAC_OS_X_VERSION_10_7 = 1070;

const int MAC_OS_X_VERSION_10_8 = 1080;

const int MAC_OS_X_VERSION_10_9 = 1090;

const int MAC_OS_X_VERSION_10_10 = 101000;

const int MAC_OS_X_VERSION_10_10_2 = 101002;

const int MAC_OS_X_VERSION_10_10_3 = 101003;

const int MAC_OS_X_VERSION_10_11 = 101100;

const int MAC_OS_X_VERSION_10_11_2 = 101102;

const int MAC_OS_X_VERSION_10_11_3 = 101103;

const int MAC_OS_X_VERSION_10_11_4 = 101104;

const int MAC_OS_X_VERSION_10_12 = 101200;

const int MAC_OS_X_VERSION_10_12_1 = 101201;

const int MAC_OS_X_VERSION_10_12_2 = 101202;

const int MAC_OS_X_VERSION_10_12_4 = 101204;

const int MAC_OS_X_VERSION_10_13 = 101300;

const int MAC_OS_X_VERSION_10_13_1 = 101301;

const int MAC_OS_X_VERSION_10_13_2 = 101302;

const int MAC_OS_X_VERSION_10_13_4 = 101304;

const int MAC_OS_X_VERSION_10_14 = 101400;

const int MAC_OS_X_VERSION_10_14_1 = 101401;

const int MAC_OS_X_VERSION_10_14_4 = 101404;

const int MAC_OS_X_VERSION_10_14_5 = 101405;

const int MAC_OS_X_VERSION_10_14_6 = 101406;

const int MAC_OS_X_VERSION_10_15 = 101500;

const int MAC_OS_X_VERSION_10_15_1 = 101501;

const int MAC_OS_X_VERSION_10_15_4 = 101504;

const int MAC_OS_X_VERSION_10_16 = 101600;

const int MAC_OS_VERSION_11_0 = 110000;

const int MAC_OS_VERSION_11_1 = 110100;

const int MAC_OS_VERSION_11_3 = 110300;

const int MAC_OS_VERSION_11_4 = 110400;

const int MAC_OS_VERSION_11_5 = 110500;

const int MAC_OS_VERSION_11_6 = 110600;

const int MAC_OS_VERSION_12_0 = 120000;

const int MAC_OS_VERSION_12_1 = 120100;

const int MAC_OS_VERSION_12_2 = 120200;

const int MAC_OS_VERSION_12_3 = 120300;

const int MAC_OS_VERSION_12_4 = 120400;

const int MAC_OS_VERSION_12_5 = 120500;

const int MAC_OS_VERSION_13_0 = 130000;

const int MAC_OS_VERSION_13_1 = 130100;

const int MAC_OS_VERSION_13_2 = 130200;

const int MAC_OS_VERSION_13_3 = 130300;

const int MAC_OS_VERSION_13_4 = 130400;

const int MAC_OS_VERSION_14_0 = 140000;

const int __MAC_OS_X_VERSION_MIN_REQUIRED = 140000;

const int __MAC_OS_X_VERSION_MAX_ALLOWED = 140000;

const int __ENABLE_LEGACY_MAC_AVAILABILITY = 1;

const int __DARWIN_ONLY_64_BIT_INO_T = 0;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 0;

const int __DARWIN_ONLY_VERS_1050 = 0;

const int __DARWIN_UNIX03 = 0;

const int __DARWIN_64_BIT_INO_T = 0;

const int __DARWIN_VERS_1050 = 0;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int __has_ptrcheck = 0;

const int __DARWIN_NULL = 0;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int __DARWIN_WEOF = -1;

const int _FORTIFY_SOURCE = 2;

const int __DARWIN_NSIG = 32;

const int NSIG = 32;

const int _ARM_SIGNAL_ = 1;

const int SIGHUP = 1;

const int SIGINT = 2;

const int SIGQUIT = 3;

const int SIGILL = 4;

const int SIGTRAP = 5;

const int SIGABRT = 6;

const int SIGIOT = 6;

const int SIGEMT = 7;

const int SIGFPE = 8;

const int SIGKILL = 9;

const int SIGBUS = 10;

const int SIGSEGV = 11;

const int SIGSYS = 12;

const int SIGPIPE = 13;

const int SIGALRM = 14;

const int SIGTERM = 15;

const int SIGURG = 16;

const int SIGSTOP = 17;

const int SIGTSTP = 18;

const int SIGCONT = 19;

const int SIGCHLD = 20;

const int SIGTTIN = 21;

const int SIGTTOU = 22;

const int SIGIO = 23;

const int SIGXCPU = 24;

const int SIGXFSZ = 25;

const int SIGVTALRM = 26;

const int SIGPROF = 27;

const int SIGWINCH = 28;

const int SIGINFO = 29;

const int SIGUSR1 = 30;

const int SIGUSR2 = 31;

const int USER_ADDR_NULL = 0;

const int __DARWIN_OPAQUE_ARM_THREAD_STATE64 = 0;

const int __DARWIN_ARM_THREAD_STATE64_FLAGS_NO_PTRAUTH = 1;

const int __DARWIN_ARM_THREAD_STATE64_FLAGS_IB_SIGNED_LR = 2;

const int __DARWIN_ARM_THREAD_STATE64_FLAGS_KERNEL_SIGNED_PC = 4;

const int __DARWIN_ARM_THREAD_STATE64_FLAGS_KERNEL_SIGNED_LR = 8;

const int __DARWIN_ARM_THREAD_STATE64_USER_DIVERSIFIER_MASK = 4278190080;

const int __DARWIN_ARM_THREAD_STATE64_SIGRETURN_PC_MASK = 983040;

const int __DARWIN_ARM_THREAD_STATE64_SIGRETURN_LR_MASK = 15728640;

const int SIGEV_NONE = 0;

const int SIGEV_SIGNAL = 1;

const int SIGEV_THREAD = 3;

const int ILL_NOOP = 0;

const int ILL_ILLOPC = 1;

const int ILL_ILLTRP = 2;

const int ILL_PRVOPC = 3;

const int ILL_ILLOPN = 4;

const int ILL_ILLADR = 5;

const int ILL_PRVREG = 6;

const int ILL_COPROC = 7;

const int ILL_BADSTK = 8;

const int FPE_NOOP = 0;

const int FPE_FLTDIV = 1;

const int FPE_FLTOVF = 2;

const int FPE_FLTUND = 3;

const int FPE_FLTRES = 4;

const int FPE_FLTINV = 5;

const int FPE_FLTSUB = 6;

const int FPE_INTDIV = 7;

const int FPE_INTOVF = 8;

const int SEGV_NOOP = 0;

const int SEGV_MAPERR = 1;

const int SEGV_ACCERR = 2;

const int BUS_NOOP = 0;

const int BUS_ADRALN = 1;

const int BUS_ADRERR = 2;

const int BUS_OBJERR = 3;

const int TRAP_BRKPT = 1;

const int TRAP_TRACE = 2;

const int CLD_NOOP = 0;

const int CLD_EXITED = 1;

const int CLD_KILLED = 2;

const int CLD_DUMPED = 3;

const int CLD_TRAPPED = 4;

const int CLD_STOPPED = 5;

const int CLD_CONTINUED = 6;

const int POLL_IN = 1;

const int POLL_OUT = 2;

const int POLL_MSG = 3;

const int POLL_ERR = 4;

const int POLL_PRI = 5;

const int POLL_HUP = 6;

const int SA_ONSTACK = 1;

const int SA_RESTART = 2;

const int SA_RESETHAND = 4;

const int SA_NOCLDSTOP = 8;

const int SA_NODEFER = 16;

const int SA_NOCLDWAIT = 32;

const int SA_SIGINFO = 64;

const int SA_USERTRAMP = 256;

const int SA_64REGSET = 512;

const int SA_USERSPACE_MASK = 127;

const int SIG_BLOCK = 1;

const int SIG_UNBLOCK = 2;

const int SIG_SETMASK = 3;

const int SI_USER = 65537;

const int SI_QUEUE = 65538;

const int SI_TIMER = 65539;

const int SI_ASYNCIO = 65540;

const int SI_MESGQ = 65541;

const int SS_ONSTACK = 1;

const int SS_DISABLE = 4;

const int MINSIGSTKSZ = 32768;

const int SIGSTKSZ = 131072;

const int SV_ONSTACK = 1;

const int SV_INTERRUPT = 2;

const int SV_RESETHAND = 4;

const int SV_NODEFER = 16;

const int SV_NOCLDSTOP = 8;

const int SV_SIGINFO = 64;

const int __WORDSIZE = 64;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int UINTPTR_MAX = -1;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int PRIO_PROCESS = 0;

const int PRIO_PGRP = 1;

const int PRIO_USER = 2;

const int PRIO_DARWIN_THREAD = 3;

const int PRIO_DARWIN_PROCESS = 4;

const int PRIO_MIN = -20;

const int PRIO_MAX = 20;

const int PRIO_DARWIN_BG = 4096;

const int PRIO_DARWIN_NONUI = 4097;

const int RUSAGE_SELF = 0;

const int RUSAGE_CHILDREN = -1;

const int RUSAGE_INFO_V0 = 0;

const int RUSAGE_INFO_V1 = 1;

const int RUSAGE_INFO_V2 = 2;

const int RUSAGE_INFO_V3 = 3;

const int RUSAGE_INFO_V4 = 4;

const int RUSAGE_INFO_V5 = 5;

const int RUSAGE_INFO_V6 = 6;

const int RUSAGE_INFO_CURRENT = 6;

const int RU_PROC_RUNS_RESLIDE = 1;

const int RLIM_INFINITY = 9223372036854775807;

const int RLIM_SAVED_MAX = 9223372036854775807;

const int RLIM_SAVED_CUR = 9223372036854775807;

const int RLIMIT_CPU = 0;

const int RLIMIT_FSIZE = 1;

const int RLIMIT_DATA = 2;

const int RLIMIT_STACK = 3;

const int RLIMIT_CORE = 4;

const int RLIMIT_AS = 5;

const int RLIMIT_RSS = 5;

const int RLIMIT_MEMLOCK = 6;

const int RLIMIT_NPROC = 7;

const int RLIMIT_NOFILE = 8;

const int RLIM_NLIMITS = 9;

const int _RLIMIT_POSIX_FLAG = 4096;

const int RLIMIT_WAKEUPS_MONITOR = 1;

const int RLIMIT_CPU_USAGE_MONITOR = 2;

const int RLIMIT_THREAD_CPULIMITS = 3;

const int RLIMIT_FOOTPRINT_INTERVAL = 4;

const int WAKEMON_ENABLE = 1;

const int WAKEMON_DISABLE = 2;

const int WAKEMON_GET_PARAMS = 4;

const int WAKEMON_SET_DEFAULTS = 8;

const int WAKEMON_MAKE_FATAL = 16;

const int CPUMON_MAKE_FATAL = 4096;

const int FOOTPRINT_INTERVAL_RESET = 1;

const int IOPOL_TYPE_DISK = 0;

const int IOPOL_TYPE_VFS_ATIME_UPDATES = 2;

const int IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES = 3;

const int IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME = 4;

const int IOPOL_TYPE_VFS_TRIGGER_RESOLVE = 5;

const int IOPOL_TYPE_VFS_IGNORE_CONTENT_PROTECTION = 6;

const int IOPOL_TYPE_VFS_IGNORE_PERMISSIONS = 7;

const int IOPOL_TYPE_VFS_SKIP_MTIME_UPDATE = 8;

const int IOPOL_TYPE_VFS_ALLOW_LOW_SPACE_WRITES = 9;

const int IOPOL_TYPE_VFS_DISALLOW_RW_FOR_O_EVTONLY = 10;

const int IOPOL_SCOPE_PROCESS = 0;

const int IOPOL_SCOPE_THREAD = 1;

const int IOPOL_SCOPE_DARWIN_BG = 2;

const int IOPOL_DEFAULT = 0;

const int IOPOL_IMPORTANT = 1;

const int IOPOL_PASSIVE = 2;

const int IOPOL_THROTTLE = 3;

const int IOPOL_UTILITY = 4;

const int IOPOL_STANDARD = 5;

const int IOPOL_APPLICATION = 5;

const int IOPOL_NORMAL = 1;

const int IOPOL_ATIME_UPDATES_DEFAULT = 0;

const int IOPOL_ATIME_UPDATES_OFF = 1;

const int IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT = 0;

const int IOPOL_MATERIALIZE_DATALESS_FILES_OFF = 1;

const int IOPOL_MATERIALIZE_DATALESS_FILES_ON = 2;

const int IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT = 0;

const int IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME = 1;

const int IOPOL_VFS_TRIGGER_RESOLVE_DEFAULT = 0;

const int IOPOL_VFS_TRIGGER_RESOLVE_OFF = 1;

const int IOPOL_VFS_CONTENT_PROTECTION_DEFAULT = 0;

const int IOPOL_VFS_CONTENT_PROTECTION_IGNORE = 1;

const int IOPOL_VFS_IGNORE_PERMISSIONS_OFF = 0;

const int IOPOL_VFS_IGNORE_PERMISSIONS_ON = 1;

const int IOPOL_VFS_SKIP_MTIME_UPDATE_OFF = 0;

const int IOPOL_VFS_SKIP_MTIME_UPDATE_ON = 1;

const int IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_OFF = 0;

const int IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_ON = 1;

const int IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_DEFAULT = 0;

const int IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_ON = 1;

const int IOPOL_VFS_NOCACHE_WRITE_FS_BLKSIZE_DEFAULT = 0;

const int IOPOL_VFS_NOCACHE_WRITE_FS_BLKSIZE_ON = 1;

const int WNOHANG = 1;

const int WUNTRACED = 2;

const int WCOREFLAG = 128;

const int _WSTOPPED = 127;

const int WEXITED = 4;

const int WCONTINUED = 16;

const int WNOWAIT = 32;

const int WAIT_ANY = -1;

const int WAIT_MYPGRP = 0;

const int _QUAD_HIGHWORD = 1;

const int _QUAD_LOWWORD = 0;

const int __DARWIN_LITTLE_ENDIAN = 1234;

const int __DARWIN_BIG_ENDIAN = 4321;

const int __DARWIN_PDP_ENDIAN = 3412;

const int __DARWIN_BYTE_ORDER = 1234;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int BYTE_ORDER = 1234;

const int WSTOPPED = 127;

const int EXIT_FAILURE = 1;

const int EXIT_SUCCESS = 0;

const int RAND_MAX = 2147483647;

const int _STRING_H_ = 1;

const int __DARWIN_FD_SETSIZE = 1024;

const int __DARWIN_NBBY = 8;

const int __DARWIN_NFDBITS = 32;

const int NBBY = 8;

const int NFDBITS = 32;

const int FD_SETSIZE = 1024;

const int MAB_TRUE = 1;

const int MAB_FALSE = 0;

const int __GNUC_VA_LIST = 1;

const int RENAME_SECLUDE = 1;

const int RENAME_SWAP = 2;

const int RENAME_EXCL = 4;

const int RENAME_RESERVED1 = 8;

const int RENAME_NOFOLLOW_ANY = 16;

const int SEEK_SET = 0;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const int SEEK_HOLE = 3;

const int SEEK_DATA = 4;

const int __SLBF = 1;

const int __SNBF = 2;

const int __SRD = 4;

const int __SWR = 8;

const int __SRW = 16;

const int __SEOF = 32;

const int __SERR = 64;

const int __SMBF = 128;

const int __SAPP = 256;

const int __SSTR = 512;

const int __SOPT = 1024;

const int __SNPT = 2048;

const int __SOFF = 4096;

const int __SMOD = 8192;

const int __SALC = 16384;

const int __SIGN = 32768;

const int _IOFBF = 0;

const int _IOLBF = 1;

const int _IONBF = 2;

const int BUFSIZ = 1024;

const int EOF = -1;

const int FOPEN_MAX = 20;

const int FILENAME_MAX = 1024;

const String P_tmpdir = '/var/tmp/';

const int L_tmpnam = 1024;

const int TMP_MAX = 308915776;

const int L_ctermid = 1024;

const int __DARWIN_CLK_TCK = 100;

const int CLOCKS_PER_SEC = 100;

const int CLOCK_REALTIME = 0;

const int CLOCK_MONOTONIC = 6;

const int CLOCK_MONOTONIC_RAW = 4;

const int CLOCK_MONOTONIC_RAW_APPROX = 5;

const int CLOCK_UPTIME_RAW = 8;

const int CLOCK_UPTIME_RAW_APPROX = 9;

const int CLOCK_PROCESS_CPUTIME_ID = 12;

const int CLOCK_THREAD_CPUTIME_ID = 16;

const int TIME_UTC = 1;

const int WEOF = -1;

const int _CACHED_RUNES = 256;

const int _CRMASK = -256;

const String _RUNE_MAGIC_A = 'RuneMagA';

const int _CTYPE_A = 256;

const int _CTYPE_C = 512;

const int _CTYPE_D = 1024;

const int _CTYPE_G = 2048;

const int _CTYPE_L = 4096;

const int _CTYPE_P = 8192;

const int _CTYPE_S = 16384;

const int _CTYPE_U = 32768;

const int _CTYPE_X = 65536;

const int _CTYPE_B = 131072;

const int _CTYPE_R = 262144;

const int _CTYPE_I = 524288;

const int _CTYPE_T = 1048576;

const int _CTYPE_Q = 2097152;

const int _CTYPE_SW0 = 536870912;

const int _CTYPE_SW1 = 1073741824;

const int _CTYPE_SW2 = 2147483648;

const int _CTYPE_SW3 = 3221225472;

const int _CTYPE_SWM = 3758096384;

const int _CTYPE_SWS = 30;
